module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart, pp_start: peg$parsepp_start, statement_no_new_scope_start: peg$parsestatement_no_new_scope_start, expression_statement_start: peg$parseexpression_statement_start },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = function(tu) { 
            var data = {
              node_with_node_condition: _pp_node_with_node_condition,
              vardef_ids: _pp_vardef_identifiers,
              import_export: _pp_import_export,
              uid_to_nodes: _uid_to_node,
            }
            
            if (!tu)
              tu = [];
            
            data.ast = parenting_unit(common_node({
              node: "root",
              parts: tu,
              after_comments: []
            }));

            for (var i in _pp_insertions) 
              data.ast.after_comments.push(_pp_insertions[i]);

            return data;
          },
        peg$c1 = function(left, right) { 
            var parts = [left];
            parts.push.apply(parts, right[0]);

            return parts;
          },
        peg$c2 = function() { return [] },
        peg$c3 = function(decl) { 
            return common_node({
              node: "external_declaration",
              decl: decl
            });
          },
        peg$c4 = function(func, s) {
            return common_node({
              node: "function_declaration",
              function: func,
              punctuation: {
                semicolon: s
              }
            });
          },
        peg$c5 = function(list, s) { 
            return common_node({
              node: "init_declarator_list",
              list: list,
              punctuation: {
                semicolon: s
              }
            });
          },
        peg$c6 = function(key_precision, pq, type, s) { 
            return common_node({
              node: "precision_declaration",
              precision: pq,
              type: type,
              punctuation: {
                semicolon: s
              },
              keywords: {
                key_precision: key_precision
              }
            });
          },
        peg$c7 = function(lb, exp, rb) { return [0, exp, { left_bracket: lb, right_bracket: rb }] },
        peg$c8 = function(op, init) { return [1, init, op] },
        peg$c9 = function(first, others) { 
            var decl_list = {
              node: "declarator_list"
            }
            var vars = []
            vars.push(first);

            for (var i = 0; i < others.length; i++) {
              var v = {};
              v.node = "single_declaration_line";
              v.punctuation = { comma: others[i][1] };
              v.identifier = others[i][3];
              v.identifier.is_declaration = true;
              if (others[i][4]) {
                var s_case = others[i][4][0];
                var s_node = others[i][4][1];

                switch (s_case) {
                case 0:
                  v.identifier.type = "array";
                  v.identifier.array_size = s_node;
                  v.identifier.punctuation = others[i][4][2];
                  break;
                case 1:
                  v.initializer = s_node;
                  v.operation = others[i][4][2];
                  break;
                }
              }
              vars.push(common_node(v));
            }
            decl_list.vars = vars;
            return common_node(decl_list);
          },
        peg$c10 = function(key_invariant, id) {
            return common_node({
              node: "single_declaration",
              keywords: {
                key_invariant: key_invariant
              },
              subtype: "invariant",
              identifier: id
            });
          },
        peg$c11 = function(type, id) { 
            var decl = {
              node: "single_declaration",
              subtype: "simple",
              type: type,
              is_node_inoutparam_decl: _is_node_param
            }
            if (id) {
              decl.identifier = id[1];
              decl.identifier.is_declaration = true;
              if (id[2]) {
                var s_case = id[2][0];
                var s_node = id[2][1];
                switch (s_case) {
                case 0:
                  decl.identifier.type = "array";
                  decl.identifier.array_size = s_node;
                  decl.identifier.punctuation = id[2][2];
                  break;
                case 1:
                  decl.initializer = s_node;
                  decl.operation = id[2][2];
                  break;
                }
              }
            }

            return common_node(decl);
          },
        peg$c12 = function(head, scope) {
            return common_node({
              node: "function_definition",
              head: head,
              scope: scope
            });
          },
        peg$c13 = function(type, id) {
            id.is_declaration = true;
            return common_node({
              node: "function_head",
              type: type,
              identifier: id
            });
          },
        peg$c14 = function(parms, body) {
            return common_node({
              node: "function_scope",
              parameters: parms,
              body: body,
              new_scope: true
            });
          },
        peg$c15 = function(first, others) { return { first: first, others: others } },
        peg$c16 = "",
        peg$c17 = function(lp, parms, rp) {
            parm_node = {
              node: "function_parameters",
              parameters: [],
              punctuation: {
                left_paren: lp,
                right_paren: rp,
              }
            };
            if (parms.first) {
              parm_node.parameters = [parms.first];
              for (var i = 0; i < parms.others.length; i++) {
                var parm = parms.others[i][3];
                parm.punctuation = { comma: parms.others[i][1] };
                parm_node.parameters.push(parm);
              }
            }

            return common_node(parm_node);
          },
        peg$c18 = function(head, parms) {
            parms.new_scope = true;
            return common_node({
              node: "function_declarator",
              head: head,
              parameters: parms
            });
          },
        peg$c19 = function(tq, pq, parm) {
            var parm_node = {
              node: "parameter_declaration",
              parameter: parm
            }
            if (tq)
              parm_node.type_qualifier = tq[0];
            if (pq)
              parm_node.parameter_qualifier = pq[0];

            return common_node(parm_node);
          },
        peg$c20 = function(type, id, arr) {
            id.is_declaration = true;
            var parm_node = {
              node: "parameter_declarator",
              type: type,
              identifier: id
            }
            if (arr) {
              parm_node.identifier.type = "array";
              parm_node.identifier.array_size = arr[3];
              parm_node.identifier.punctuation = {
                left_bracket: arr[1],
                right_bracket: arr[5]
              };
            }
            return common_node(parm_node);
          },
        peg$c21 = function(func) { 
            return common_node({
              node: "function_call",
              identifier: func.identifier,
              parameters: func.parameters,
              punctuation: func.punctuation
            });
          },
        peg$c22 = function(id, rp) {
            return {
              identifier: id,
              parameters: [],
              punctuation: {
                right_paren: rp
              }
            }
          },
        peg$c23 = function(id, parms, rp) {
            var parameters = [parms[0]];
            for (var i = 0; i < parms[1].length; i++) {
              var parm = parms[1][i][3];
              if (!parm.punctuation)
                parm.punctuation = {};
              parm.punctuation.comma = parms[1][i][1];
              parameters.push(parm);
            }

            return {
              identifier: id,
              parameters: parameters,
              punctuation: {
                right_paren: rp
              }
            }
          },
        peg$c24 = function(id, lp) { 
            id.punctuation = {
              left_paren: lp
            };
            return id;
          },
        peg$c25 = function(identifier) { return identifier },
        peg$c26 = function(key_struct, id, lb, list, rb) {
            var struct_node = {
              node: "struct_specifier",
              declaration_list: list,
              punctuation: {
                left_brace: lb,
                right_brace: rb
              },
              keywords: {
                key_struct: key_struct
              }
            }
            if (id) {
              id.is_declaration = true;
              struct_node.struct_type = id[1];
            }

            return common_node(struct_node);
          },
        peg$c27 = function(decl) { return decl },
        peg$c28 = function(list) {
            return common_node({
              node: "struct_declaration_list",
              list: list,
              new_scope: true
            });
          },
        peg$c29 = function(type, list, s) {
            var st_node = {
              node: "struct_declaration",
              type: type,
              declarator_list: list,
              punctuation: {
                semicolon: s
              }
            };

            for (var i = 0; i < st_node.declarator_list.list.length; i++)
              st_node.declarator_list.list[i].type = type;

            return common_node(st_node);
          },
        peg$c30 = function(first, others) {
            var declarations = [first];
            if (others.length > 0) {
              for (var i = 0; i < others.length; i++) {
                var decl = others[i][3];
                if (!decl.punctuation)
                  decl.punctuation = {};
                decl.punctuation.comma = others[i][1];
                declarations.push(decl);
              }
            }

            return common_node({
              node: "struct_declarator_list",
              list: declarations,
            });
          },
        peg$c31 = function(id, exp) {
            id.is_declaration = true;
            if (exp) {
              id.type = "array";
              id.array_size = exp[3];
              id.punctuation = {
                left_bracket: exp[1],
                right_bracket: exp[5]
              }
            }
            return common_node({
              node: "struct_declarator",
              identifier: id
            });
          },
        peg$c32 = function(c, e) { e.punctuation = { comma: c }; return e },
        peg$c33 = function(left, right) {
            var exp_list = [left];

            if (right.length > 0)
              exp_list.push.apply(exp_list, right);
            return common_node({
              node: "expression",
              list: exp_list
            });
          },
        peg$c34 = function(left, op, right) { 
            return common_node({
              node: "assignment_expression",
              left: left,
              operator: op,
              right: right
            });
          },
        peg$c35 = function(left) { 
            return common_node({
              node: "assignment_expression",
              left: left,
              operator: null,
              right: null
            });
          },
        peg$c36 = function(left, right) {
            if (right)
              return common_node({
                node: "conditional_expression",
                condition: left,
                if_true: right[3],
                if_false: right[7],
                punctuation: {
                  question: right[1],
                  colon: right[5]
                }
              });
            else
              return common_node({
                node: "conditional_expression",
                condition: left,
                if_true: null,
                if_false: null,
                punctuation: {
                  question: null,
                  colon: null
                }
              });
          },
        peg$c37 = function(op, exp) { return [op,exp] },
        peg$c38 = function(left, right) {
            if (right.length > 0)
              return binary_chain_node("logical_or_expression", left, right);
            else
              return left;
          },
        peg$c39 = function(left, right) {
            if (right.length > 0)
              return binary_chain_node("logical_xor_expression", left, right);
            else
              return left;
          },
        peg$c40 = function(left, right) {
            if (right.length > 0)
              return binary_chain_node("logical_and_expression", left, right);
            else
              return left;
          },
        peg$c41 = function(left, right) {
            if (right.length > 0)
              return binary_chain_node("equality_expression", left, right);
            else
              return left;
          },
        peg$c42 = function(left, right) {
            if (right.length > 0)
              return binary_chain_node("relational_expression", left, right);
            else
              return left;
          },
        peg$c43 = function(left, right) {
            if (right.length > 0)
              return binary_chain_node("additive_expression", left, right);
            else
              return left;
          },
        peg$c44 = function(left, right) {
            if (right.length > 0)
              return binary_chain_node("multiplicative_expression", left, right);
            else
              return left;
          },
        peg$c45 = function(op, exp) { 
            return common_node({
              node: "prefix_expression",
              operator: op,
              expression: exp
            });
          },
        peg$c46 = function(lb, token, rb) { 
                  return common_node({
                    node: "index_accessor",
                    index: token,
                    punctuation: {
                      left_bracket: lb,
                      right_bracket: rb
                    }
                  });
                },
        peg$c47 = function(op) { return op },
        peg$c48 = function(left, right) { 
            if (right.length > 0)
              return unary_chain_node("postfix_expression", left, right);
            else
              return left;
          },
        peg$c49 = function(exp) {
            var p_node = {
              
            }

            if (exp.node == "identifier")
              p_node.identifier = exp;
            else
              p_node.exp = exp;
            
            return common_node({
              node: "primary_expression",
              expression: exp
            });
          },
        peg$c50 = function(lp, exp, rp) {
            return common_node({
              node: "paren_expression",
              expression: exp,
              punctuation: {
                left_paren: lp,
                right_paren: rp
              }
            });
          },
        peg$c51 = function(lb, list, rb) {
            return common_node({
              node: "compound_statement_no_new_scope",
              list: list,
              punctuation: {
                left_brace: lb,
                right_brace: rb
              }
            });
          },
        peg$c52 = function(s) { return s; },
        peg$c53 = function(list) { 
            var node = common_node({
              node: "statement_list",
              list: list
            });
            return node;
          },
        peg$c54 = function(stat) {
            return common_node({
              node: "statement_no_new_scope",
              statement: stat
            });
          },
        peg$c55 = function(lb, list, rb) {
            return common_node({
              node: "compound_statement_with_scope",
              list: list,
              punctuation: {
                left_brace: lb,
                right_brace: rb
              },
              new_scope: true,
              without_braces: false
            });
          },
        peg$c56 = function(stat) {
            return common_node({
              node: "simple_statement",
              statement: stat
            });
          },
        peg$c57 = function(decl) {
            return common_node({
              node: "declaration_statement",
              statement: decl
            });
          },
        peg$c58 = function(exp, s) { 
            var e_node = {
              node: "expression_statement",
              punctuation: {
                semicolon: s
              }
            }

            e_node.statement = (exp) ? exp[0] : null;
            return common_node(e_node);
          },
        peg$c59 = function(key_if, lp, exp, rp, srs) {
            var sel_node = {
              node: "selection_statement",
              expression: exp,
              if_actions: srs.if_actions,
              punctuation: {
                left_paren: lp,
                right_paren: rp
              },
              keywords: {
                key_if: key_if
              }
            }

            if (srs.else_actions) {
              sel_node.else_actions = srs.else_actions;
              sel_node.keywords.key_else = srs.keywords.key_else;
            }

            return common_node(sel_node);
          },
        peg$c60 = function(if_act, else_act) {
            var sel_node = {
              node: "selection_rest_statement",
              if_actions: if_act
            };

            if (else_act) {
              sel_node.else_actions = else_act[3];
              sel_node.keywords = { key_else: else_act[1] };
            }

            return common_node(sel_node);
          },
        peg$c61 = function(stat) {
            return common_node({
              node: "statement_with_scope",
              statement: stat,
              new_scope: true
            });
          },
        peg$c62 = function(key_while, lp, cond, rp, body) {
            return common_node({
              node: "iteration_statement",
              type: "while",
              condition: cond,
              body: body,
              punctuation: {
                left_paren: lp,
                right_paren: rp
              },
              keywords: {
                key_while: key_while
              },
              new_scope: true
            });
          },
        peg$c63 = function(key_do, body, key_while, lp, cond, rp, s) {
            return common_node({
              node: "iteration_statement",
              type: "do_while",
              body: (body) ? body : null,
              condition: cond,
              punctuation: {
                left_paren: lp,
                right_paren: rp,
                semicolon: s
              },
              keywords: {
                key_do: key_do,
                key_while: key_while
              },
              new_scope: true
            });
          },
        peg$c64 = function(key_for, lp, fis, frs, rp, body) {
            return common_node({
              node: "iteration_statement",
              type: "for_loop",
              for_init_statement: (fis) ? fis : null,
              for_rest_statement: (frs) ? frs : null,
              body: body,
              punctuation: {
                left_paren: lp,
                right_paren: rp
              },
              keywords: {
                key_for: key_for
              },
              new_scope: true
            });
          },
        peg$c65 = function(type, id, op, init) {
                id.is_declaration = true;
                return common_node({
                  node: "condition_initializer",
                  identifier: id,
                  id_type: type,
                  initializer: init,
                  operation: op
                });
              },
        peg$c66 = function(cond) {
            return common_node({
              node: "condition",
              condition: cond
            });
          },
        peg$c67 = function(stat) {
            if (stat)
              return common_node({
                node: "for_init_statement",
                statement: stat
              });
            else
              return stat;
          },
        peg$c68 = function(cond, s, exp) {
            var condition = (cond) ? cond: null;
            var expression = (exp) ? exp: null;

            return common_node({
              node: "for_rest_statement",
              condition: condition,
              expression: expression,
              punctuation: {
                semicolon: s
              }
            });
          },
        peg$c69 = function(jump, s) { 
            return  common_node({
              node: "jump_statement",
              type: jump,
              punctuation: {
                semicolon: s
              }
            });
          },
        peg$c70 = function(jump, exp, s) { 
            return common_node({
              node: "jump_statement",
              type: jump,
              returned_exp: exp,
              punctuation: {
                semicolon: s
              }
            });
          },
        peg$c71 = function(prec, spec) {
            var type_spec = {
              node: "type_specifier",
              type_specifier: spec
            }
            if (prec)
              type_spec.precision = prec[0];

            return common_node(type_spec);
          },
        peg$c72 = function(type, ext) {
            var type_node =  {
              node: "parameter_type_specifier",
              type: type
            };
            if (ext) {
              type_node.array_size = ext[3];
              type_node.punctuation = {
                left_bracket: ext[1],
                right_bracket: ext[5]        
              }
            }

            return common_node(type_node);
          },
        peg$c73 = function(qual, spec) { 
            var type_node = {
              node: "fully_specified_type",
              type_specifier: spec.type_specifier,
            };

            if (spec.precision)
              type_node.precision_qualifier = spec.precision;
            if (qual)
              type_node.type_qualifier = qual[0];

            return common_node(type_node);
          },
        peg$c74 = function(value) { return [value[0], value[2]] },
        peg$c75 = function(value) { 
          return common_node({
            node: "type_qualifier",
            value: value
          });
        },
        peg$c76 = function(value) { 
          return common_node({
            node: "parameter_qualifier",
            value: value
          });
        },
        peg$c77 = function(value) { 
          return common_node({
            node: "precision_qualifier",
            value: value
          });
        },
        peg$c78 = function(name) { 
          return common_node({
            node: "type_specifier_no_prec",
            name: name
          });
        },
        peg$c79 = function(name) {
            return common_node({
              node: "identifier",
              name: name
            });
          },
        peg$c80 = function(id) { 
            var chars = [];
            chars.push.apply(chars, id[0]);
            chars.push.apply(chars, id[1]);
            var name = chars.join("");

            // "__" reserved
            if (name.indexOf("__") > -1)
              return null;
            else
              return common_node({
                node: "identifier",
                name: name
              });
          },
        peg$c81 = function(id) { 
              return common_node({
                node: "struct_type",
                identifier: id
              });
            },
        peg$c82 = function(token) { 
            var value = token.join("");
            return common_node({
              node: "float_constant",
              value: value
            });
          },
        peg$c83 = function(value) { 
            return common_node({
              node: "integer_constant",
              value: value
            });
          },
        peg$c84 = "true",
        peg$c85 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c86 = "false",
        peg$c87 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c88 = function(value) { 
            return common_node({
              node: "bool_constant",
              value: value == "true"
            });
          },
        peg$c89 = function(d, id) { 
            return common_node({
              node: "field_selection",
              identifier: id,
              punctuation: {
                dot: d
              }
            });
          },
        peg$c90 = function(value) { return value.name },
        peg$c91 = "asm",
        peg$c92 = { type: "literal", value: "asm", description: "\"asm\"" },
        peg$c93 = "class",
        peg$c94 = { type: "literal", value: "class", description: "\"class\"" },
        peg$c95 = "union",
        peg$c96 = { type: "literal", value: "union", description: "\"union\"" },
        peg$c97 = "enum",
        peg$c98 = { type: "literal", value: "enum", description: "\"enum\"" },
        peg$c99 = "typedef",
        peg$c100 = { type: "literal", value: "typedef", description: "\"typedef\"" },
        peg$c101 = "template",
        peg$c102 = { type: "literal", value: "template", description: "\"template\"" },
        peg$c103 = "this",
        peg$c104 = { type: "literal", value: "this", description: "\"this\"" },
        peg$c105 = "packed",
        peg$c106 = { type: "literal", value: "packed", description: "\"packed\"" },
        peg$c107 = "goto",
        peg$c108 = { type: "literal", value: "goto", description: "\"goto\"" },
        peg$c109 = "switch",
        peg$c110 = { type: "literal", value: "switch", description: "\"switch\"" },
        peg$c111 = "default",
        peg$c112 = { type: "literal", value: "default", description: "\"default\"" },
        peg$c113 = "inline",
        peg$c114 = { type: "literal", value: "inline", description: "\"inline\"" },
        peg$c115 = "noinline",
        peg$c116 = { type: "literal", value: "noinline", description: "\"noinline\"" },
        peg$c117 = "volatile",
        peg$c118 = { type: "literal", value: "volatile", description: "\"volatile\"" },
        peg$c119 = "public",
        peg$c120 = { type: "literal", value: "public", description: "\"public\"" },
        peg$c121 = "static",
        peg$c122 = { type: "literal", value: "static", description: "\"static\"" },
        peg$c123 = "extern",
        peg$c124 = { type: "literal", value: "extern", description: "\"extern\"" },
        peg$c125 = "external",
        peg$c126 = { type: "literal", value: "external", description: "\"external\"" },
        peg$c127 = "interface",
        peg$c128 = { type: "literal", value: "interface", description: "\"interface\"" },
        peg$c129 = "flat",
        peg$c130 = { type: "literal", value: "flat", description: "\"flat\"" },
        peg$c131 = "long",
        peg$c132 = { type: "literal", value: "long", description: "\"long\"" },
        peg$c133 = "short",
        peg$c134 = { type: "literal", value: "short", description: "\"short\"" },
        peg$c135 = "double",
        peg$c136 = { type: "literal", value: "double", description: "\"double\"" },
        peg$c137 = "half",
        peg$c138 = { type: "literal", value: "half", description: "\"half\"" },
        peg$c139 = "fixed",
        peg$c140 = { type: "literal", value: "fixed", description: "\"fixed\"" },
        peg$c141 = "unsigned",
        peg$c142 = { type: "literal", value: "unsigned", description: "\"unsigned\"" },
        peg$c143 = "superp",
        peg$c144 = { type: "literal", value: "superp", description: "\"superp\"" },
        peg$c145 = "input",
        peg$c146 = { type: "literal", value: "input", description: "\"input\"" },
        peg$c147 = "output",
        peg$c148 = { type: "literal", value: "output", description: "\"output\"" },
        peg$c149 = "hvec2",
        peg$c150 = { type: "literal", value: "hvec2", description: "\"hvec2\"" },
        peg$c151 = "hvec3",
        peg$c152 = { type: "literal", value: "hvec3", description: "\"hvec3\"" },
        peg$c153 = "hvec4",
        peg$c154 = { type: "literal", value: "hvec4", description: "\"hvec4\"" },
        peg$c155 = "dvec2",
        peg$c156 = { type: "literal", value: "dvec2", description: "\"dvec2\"" },
        peg$c157 = "dvec3",
        peg$c158 = { type: "literal", value: "dvec3", description: "\"dvec3\"" },
        peg$c159 = "dvec4",
        peg$c160 = { type: "literal", value: "dvec4", description: "\"dvec4\"" },
        peg$c161 = "fvec2",
        peg$c162 = { type: "literal", value: "fvec2", description: "\"fvec2\"" },
        peg$c163 = "fvec3",
        peg$c164 = { type: "literal", value: "fvec3", description: "\"fvec3\"" },
        peg$c165 = "fvec4",
        peg$c166 = { type: "literal", value: "fvec4", description: "\"fvec4\"" },
        peg$c167 = "sampler1D",
        peg$c168 = { type: "literal", value: "sampler1D", description: "\"sampler1D\"" },
        peg$c169 = "sampler3D",
        peg$c170 = { type: "literal", value: "sampler3D", description: "\"sampler3D\"" },
        peg$c171 = "sampler1DShadow",
        peg$c172 = { type: "literal", value: "sampler1DShadow", description: "\"sampler1DShadow\"" },
        peg$c173 = "sampler2DShadow",
        peg$c174 = { type: "literal", value: "sampler2DShadow", description: "\"sampler2DShadow\"" },
        peg$c175 = "sampler2DRect",
        peg$c176 = { type: "literal", value: "sampler2DRect", description: "\"sampler2DRect\"" },
        peg$c177 = "sampler3DRect",
        peg$c178 = { type: "literal", value: "sampler3DRect", description: "\"sampler3DRect\"" },
        peg$c179 = "sampler2DRectShadow",
        peg$c180 = { type: "literal", value: "sampler2DRectShadow", description: "\"sampler2DRectShadow\"" },
        peg$c181 = "sizeof",
        peg$c182 = { type: "literal", value: "sizeof", description: "\"sizeof\"" },
        peg$c183 = "cast",
        peg$c184 = { type: "literal", value: "cast", description: "\"cast\"" },
        peg$c185 = "namespace",
        peg$c186 = { type: "literal", value: "namespace", description: "\"namespace\"" },
        peg$c187 = "using",
        peg$c188 = { type: "literal", value: "using", description: "\"using\"" },
        peg$c189 = "+",
        peg$c190 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c191 = function(token) { return operation_node("addition", token) },
        peg$c192 = "-",
        peg$c193 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c194 = function(token) { return operation_node("subtraction", token) },
        peg$c195 = "*",
        peg$c196 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c197 = function(token) { return operation_node("multiply", token) },
        peg$c198 = "/",
        peg$c199 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c200 = function(token) { return operation_node("division", token) },
        peg$c201 = "++",
        peg$c202 = { type: "literal", value: "++", description: "\"++\"" },
        peg$c203 = function(token) { return operation_node("increment", token) },
        peg$c204 = "--",
        peg$c205 = { type: "literal", value: "--", description: "\"--\"" },
        peg$c206 = function(token) { return operation_node("decrement", token) },
        peg$c207 = "=",
        peg$c208 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c209 = function(token) { return operation_node("equal", token) },
        peg$c210 = "*=",
        peg$c211 = { type: "literal", value: "*=", description: "\"*=\"" },
        peg$c212 = function(token) { return operation_node("mul_assign", token) },
        peg$c213 = "/=",
        peg$c214 = { type: "literal", value: "/=", description: "\"/=\"" },
        peg$c215 = function(token) { return operation_node("div_assign", token) },
        peg$c216 = "+=",
        peg$c217 = { type: "literal", value: "+=", description: "\"+=\"" },
        peg$c218 = function(token) { return operation_node("add_assign", token) },
        peg$c219 = "-=",
        peg$c220 = { type: "literal", value: "-=", description: "\"-=\"" },
        peg$c221 = function(token) { return operation_node("sub_assign", token) },
        peg$c222 = "<",
        peg$c223 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c224 = function(token) { return operation_node("less", token) },
        peg$c225 = ">",
        peg$c226 = { type: "literal", value: ">", description: "\">\"" },
        peg$c227 = function(token) { return operation_node("greater", token) },
        peg$c228 = "==",
        peg$c229 = { type: "literal", value: "==", description: "\"==\"" },
        peg$c230 = "<=",
        peg$c231 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c232 = function(token) { return operation_node("less_equal", token) },
        peg$c233 = ">=",
        peg$c234 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c235 = function(token) { return operation_node("greater_equal", token) },
        peg$c236 = "!",
        peg$c237 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c238 = function(token) { return operation_node("not", token) },
        peg$c239 = "!=",
        peg$c240 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c241 = function(token) { return operation_node("not_equal", token) },
        peg$c242 = "&&",
        peg$c243 = { type: "literal", value: "&&", description: "\"&&\"" },
        peg$c244 = function(token) { return operation_node("and", token) },
        peg$c245 = "||",
        peg$c246 = { type: "literal", value: "||", description: "\"||\"" },
        peg$c247 = function(token) { return operation_node("or", token) },
        peg$c248 = "^^",
        peg$c249 = { type: "literal", value: "^^", description: "\"^^\"" },
        peg$c250 = function(token) { return operation_node("xor", token) },
        peg$c251 = "~",
        peg$c252 = { type: "literal", value: "~", description: "\"~\"" },
        peg$c253 = function(token) { return operation_node("tilde", token) },
        peg$c254 = "%",
        peg$c255 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c256 = function(token) { return operation_node("percent", token) },
        peg$c257 = "<<",
        peg$c258 = { type: "literal", value: "<<", description: "\"<<\"" },
        peg$c259 = function(token) { return operation_node("left_shift", token) },
        peg$c260 = ">>",
        peg$c261 = { type: "literal", value: ">>", description: "\">>\"" },
        peg$c262 = function(token) { return operation_node("right_shift", token) },
        peg$c263 = "&",
        peg$c264 = { type: "literal", value: "&", description: "\"&\"" },
        peg$c265 = function(token) { return operation_node("ampersand", token) },
        peg$c266 = "^",
        peg$c267 = { type: "literal", value: "^", description: "\"^\"" },
        peg$c268 = function(token) { return operation_node("caret", token) },
        peg$c269 = "|",
        peg$c270 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c271 = function(token) { return operation_node("vertical_bar", token) },
        peg$c272 = "%=",
        peg$c273 = { type: "literal", value: "%=", description: "\"%=\"" },
        peg$c274 = function(token) { return operation_node("mod_assign", token) },
        peg$c275 = "<<=",
        peg$c276 = { type: "literal", value: "<<=", description: "\"<<=\"" },
        peg$c277 = function(token) { return operation_node("left_shift_assign", token) },
        peg$c278 = ">>=",
        peg$c279 = { type: "literal", value: ">>=", description: "\">>=\"" },
        peg$c280 = function(token) { return operation_node("right_shift_assign", token) },
        peg$c281 = "&=",
        peg$c282 = { type: "literal", value: "&=", description: "\"&=\"" },
        peg$c283 = function(token) { return operation_node("and_assign", token) },
        peg$c284 = "^=",
        peg$c285 = { type: "literal", value: "^=", description: "\"^=\"" },
        peg$c286 = function(token) { return operation_node("xor_assign", token) },
        peg$c287 = "|=",
        peg$c288 = { type: "literal", value: "|=", description: "\"|=\"" },
        peg$c289 = function(token) { return operation_node("or_assign", token) },
        peg$c290 = "attribute",
        peg$c291 = { type: "literal", value: "attribute", description: "\"attribute\"" },
        peg$c292 = function(data) { return keyword_node(data) },
        peg$c293 = "const",
        peg$c294 = { type: "literal", value: "const", description: "\"const\"" },
        peg$c295 = "uniform",
        peg$c296 = { type: "literal", value: "uniform", description: "\"uniform\"" },
        peg$c297 = "varying",
        peg$c298 = { type: "literal", value: "varying", description: "\"varying\"" },
        peg$c299 = "break",
        peg$c300 = { type: "literal", value: "break", description: "\"break\"" },
        peg$c301 = "continue",
        peg$c302 = { type: "literal", value: "continue", description: "\"continue\"" },
        peg$c303 = "do",
        peg$c304 = { type: "literal", value: "do", description: "\"do\"" },
        peg$c305 = "for",
        peg$c306 = { type: "literal", value: "for", description: "\"for\"" },
        peg$c307 = "while",
        peg$c308 = { type: "literal", value: "while", description: "\"while\"" },
        peg$c309 = "if",
        peg$c310 = { type: "literal", value: "if", description: "\"if\"" },
        peg$c311 = "else",
        peg$c312 = { type: "literal", value: "else", description: "\"else\"" },
        peg$c313 = "in",
        peg$c314 = { type: "literal", value: "in", description: "\"in\"" },
        peg$c315 = "out",
        peg$c316 = { type: "literal", value: "out", description: "\"out\"" },
        peg$c317 = "inout",
        peg$c318 = { type: "literal", value: "inout", description: "\"inout\"" },
        peg$c319 = "float",
        peg$c320 = { type: "literal", value: "float", description: "\"float\"" },
        peg$c321 = "int",
        peg$c322 = { type: "literal", value: "int", description: "\"int\"" },
        peg$c323 = "void",
        peg$c324 = { type: "literal", value: "void", description: "\"void\"" },
        peg$c325 = "bool",
        peg$c326 = { type: "literal", value: "bool", description: "\"bool\"" },
        peg$c327 = "lowp",
        peg$c328 = { type: "literal", value: "lowp", description: "\"lowp\"" },
        peg$c329 = "mediump",
        peg$c330 = { type: "literal", value: "mediump", description: "\"mediump\"" },
        peg$c331 = "highp",
        peg$c332 = { type: "literal", value: "highp", description: "\"highp\"" },
        peg$c333 = "precision",
        peg$c334 = { type: "literal", value: "precision", description: "\"precision\"" },
        peg$c335 = "invariant",
        peg$c336 = { type: "literal", value: "invariant", description: "\"invariant\"" },
        peg$c337 = "discard",
        peg$c338 = { type: "literal", value: "discard", description: "\"discard\"" },
        peg$c339 = "return",
        peg$c340 = { type: "literal", value: "return", description: "\"return\"" },
        peg$c341 = "mat2",
        peg$c342 = { type: "literal", value: "mat2", description: "\"mat2\"" },
        peg$c343 = "mat3",
        peg$c344 = { type: "literal", value: "mat3", description: "\"mat3\"" },
        peg$c345 = "mat4",
        peg$c346 = { type: "literal", value: "mat4", description: "\"mat4\"" },
        peg$c347 = "vec2",
        peg$c348 = { type: "literal", value: "vec2", description: "\"vec2\"" },
        peg$c349 = "vec3",
        peg$c350 = { type: "literal", value: "vec3", description: "\"vec3\"" },
        peg$c351 = "vec4",
        peg$c352 = { type: "literal", value: "vec4", description: "\"vec4\"" },
        peg$c353 = "ivec2",
        peg$c354 = { type: "literal", value: "ivec2", description: "\"ivec2\"" },
        peg$c355 = "ivec3",
        peg$c356 = { type: "literal", value: "ivec3", description: "\"ivec3\"" },
        peg$c357 = "ivec4",
        peg$c358 = { type: "literal", value: "ivec4", description: "\"ivec4\"" },
        peg$c359 = "bvec2",
        peg$c360 = { type: "literal", value: "bvec2", description: "\"bvec2\"" },
        peg$c361 = "bvec3",
        peg$c362 = { type: "literal", value: "bvec3", description: "\"bvec3\"" },
        peg$c363 = "bvec4",
        peg$c364 = { type: "literal", value: "bvec4", description: "\"bvec4\"" },
        peg$c365 = "sampler2D",
        peg$c366 = { type: "literal", value: "sampler2D", description: "\"sampler2D\"" },
        peg$c367 = "samplerCube",
        peg$c368 = { type: "literal", value: "samplerCube", description: "\"samplerCube\"" },
        peg$c369 = "struct",
        peg$c370 = { type: "literal", value: "struct", description: "\"struct\"" },
        peg$c371 = "(",
        peg$c372 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c373 = function(data) { return punctuation_node("left_paren", data) },
        peg$c374 = ")",
        peg$c375 = { type: "literal", value: ")", description: "\")\"" },
        peg$c376 = function(data) { return punctuation_node("right_paren", data) },
        peg$c377 = "[",
        peg$c378 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c379 = function(data) { return punctuation_node("left_bracket", data) },
        peg$c380 = "]",
        peg$c381 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c382 = function(data) { return punctuation_node("right_bracket", data) },
        peg$c383 = "{",
        peg$c384 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c385 = function(data) { return punctuation_node("left_brace", data) },
        peg$c386 = "}",
        peg$c387 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c388 = function(data) { return punctuation_node("right_brace", data) },
        peg$c389 = ".",
        peg$c390 = { type: "literal", value: ".", description: "\".\"" },
        peg$c391 = function(data) { return punctuation_node("dot", data) },
        peg$c392 = ",",
        peg$c393 = { type: "literal", value: ",", description: "\",\"" },
        peg$c394 = function(data) { return punctuation_node("comma", data) },
        peg$c395 = ":",
        peg$c396 = { type: "literal", value: ":", description: "\":\"" },
        peg$c397 = function(data) { return punctuation_node("colon", data) },
        peg$c398 = ";",
        peg$c399 = { type: "literal", value: ";", description: "\";\"" },
        peg$c400 = function(data) { return punctuation_node("semicolon", data) },
        peg$c401 = "?",
        peg$c402 = { type: "literal", value: "?", description: "\"?\"" },
        peg$c403 = function(data) { return punctuation_node("question", data) },
        peg$c404 = /^[a-zA-Z_]/,
        peg$c405 = { type: "class", value: "[a-zA-Z_]", description: "[a-zA-Z_]" },
        peg$c406 = /^[0-9]/,
        peg$c407 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c408 = /^[0-7]/,
        peg$c409 = { type: "class", value: "[0-7]", description: "[0-7]" },
        peg$c410 = /^[0-9a-fA-F]/,
        peg$c411 = { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
        peg$c412 = function(token) { return token.join("") },
        peg$c413 = /^[1-9]/,
        peg$c414 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c415 = function(dec) { return parseInt(dec); },
        peg$c416 = "0",
        peg$c417 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c418 = /^[xX]/,
        peg$c419 = { type: "class", value: "[xX]", description: "[xX]" },
        peg$c420 = function(token) { 
            var hex = token.join("");
            return parseInt(hex, 16);
          },
        peg$c421 = function(token) { 
            var oct = token.join("");
            return parseInt(oct, 8);
          },
        peg$c422 = /^[0]/,
        peg$c423 = { type: "class", value: "[0]", description: "[0]" },
        peg$c424 = /^[Ee]/,
        peg$c425 = { type: "class", value: "[Ee]", description: "[Ee]" },
        peg$c426 = /^[+\-]/,
        peg$c427 = { type: "class", value: "[+-]", description: "[+-]" },
        peg$c428 = "//",
        peg$c429 = { type: "literal", value: "//", description: "\"//\"" },
        peg$c430 = { type: "any", description: "any character" },
        peg$c431 = "/*",
        peg$c432 = { type: "literal", value: "/*", description: "\"/*\"" },
        peg$c433 = "*/",
        peg$c434 = { type: "literal", value: "*/", description: "\"*/\"" },
        peg$c435 = function(symbols) { check_directive_comment(symbols); },
        peg$c436 = /^[\t\f ]/,
        peg$c437 = { type: "class", value: "[\\t\\f ]", description: "[\\t\\f ]" },
        peg$c438 = "\x0B",
        peg$c439 = { type: "literal", value: "\x0B", description: "\"\\x0B\"" },
        peg$c440 = /^[\n\r]/,
        peg$c441 = { type: "class", value: "[\\n\\r]", description: "[\\n\\r]" },
        peg$c442 = "\r\n",
        peg$c443 = { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
        peg$c444 = "\n\r",
        peg$c445 = { type: "literal", value: "\n\r", description: "\"\\n\\r\"" },
        peg$c446 = "\n",
        peg$c447 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c448 = "\r",
        peg$c449 = { type: "literal", value: "\r", description: "\"\\r\"" },
        peg$c450 = "\\",
        peg$c451 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c452 = function(first, second) { 
            var res_str = "";
            for (var i = 0; i < first.length; i++)
              res_str += first[i];
            res_str += second;
            return res_str;
          },
        peg$c453 = function(line) { return line },
        peg$c454 = function(str) { 
            var res_str = "";
            for (var i = 0; i < str.length; i++)
              res_str += str[i][1];
            return res_str;
          },
        peg$c455 = function(exp) { 
            return parenting_unit(exp);
          },
        peg$c456 = function(stat) {
            return parenting_unit(stat);
          },
        peg$c457 = function(units) {
            // process replacement for #var, #define
            return build_listing(vardef_replace(units));
          },
        peg$c458 = "#",
        peg$c459 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c460 = function(tokens) {
            var result = [];
            for (var i = 0; i < tokens.length; i++) {
              if (tokens[i][1].name)
                result.push(tokens[i][1].name);
              else
                result.push(tokens[i][1]);
            }
            return common_node({
              node: "text",
              type: "textline",
              result: result
            });
          },
        peg$c461 = "var",
        peg$c462 = { type: "literal", value: "var", description: "\"var\"" },
        peg$c463 = "define",
        peg$c464 = { type: "literal", value: "define", description: "\"define\"" },
        peg$c465 = function(dir_string) { 
            var source_str = "#" + dir_string[2] + " ";
            source_str += dir_string[4].name + " " + dir_string[6];
            source_str = source_str.trim();

            var result = {
              node: "directive",
              type: dir_string[2],
              source_str: source_str,
              repl: {
                from: dir_string[4].name,
                to: dir_string[6].trim()
              }
            }
            return common_node(result);
          },
        peg$c466 = "undef",
        peg$c467 = { type: "literal", value: "undef", description: "\"undef\"" },
        peg$c468 = function(dir_string) {
            return common_node({
              node: "directive",
              type: "undef",
              source_str: "#undef" + " " + dir_string[4].name,
              identifier: dir_string[4].name
            });
          },
        peg$c469 = "extension",
        peg$c470 = { type: "literal", value: "extension", description: "\"extension\"" },
        peg$c471 = "require",
        peg$c472 = { type: "literal", value: "require", description: "\"require\"" },
        peg$c473 = "enable",
        peg$c474 = { type: "literal", value: "enable", description: "\"enable\"" },
        peg$c475 = "warn",
        peg$c476 = { type: "literal", value: "warn", description: "\"warn\"" },
        peg$c477 = "disable",
        peg$c478 = { type: "literal", value: "disable", description: "\"disable\"" },
        peg$c479 = function(ext, behavior) {
            return common_node({
              node: "directive",
              type: "extension",
              source_str: "#extension " + ext.name + ":" + behavior,
              extension: ext.name,
              behavior: behavior
            });
          },
        peg$c480 = "ifdef",
        peg$c481 = { type: "literal", value: "ifdef", description: "\"ifdef\"" },
        peg$c482 = "ifndef",
        peg$c483 = { type: "literal", value: "ifndef", description: "\"ifndef\"" },
        peg$c484 = "elif",
        peg$c485 = { type: "literal", value: "elif", description: "\"elif\"" },
        peg$c486 = "endif",
        peg$c487 = { type: "literal", value: "endif", description: "\"endif\"" },
        peg$c488 = "error",
        peg$c489 = { type: "literal", value: "error", description: "\"error\"" },
        peg$c490 = "line",
        peg$c491 = { type: "literal", value: "line", description: "\"line\"" },
        peg$c492 = "pragma",
        peg$c493 = { type: "literal", value: "pragma", description: "\"pragma\"" },
        peg$c494 = "warning",
        peg$c495 = { type: "literal", value: "warning", description: "\"warning\"" },
        peg$c496 = function() { return "" },
        peg$c497 = function(str) { return " " + str },
        peg$c498 = function(dir) { 
            var source_str = "#" + dir[2] + " " + dir[3];
            return common_node({
              node: "directive",
              type: dir[2],
              source_str: source_str
            });
          },
        peg$c499 = "node_ifdef",
        peg$c500 = { type: "literal", value: "node_ifdef", description: "\"node_ifdef\"" },
        peg$c501 = "node_ifndef",
        peg$c502 = { type: "literal", value: "node_ifndef", description: "\"node_ifndef\"" },
        peg$c503 = "node_if",
        peg$c504 = { type: "literal", value: "node_if", description: "\"node_if\"" },
        peg$c505 = "node_elif",
        peg$c506 = { type: "literal", value: "node_elif", description: "\"node_elif\"" },
        peg$c507 = "node_else",
        peg$c508 = { type: "literal", value: "node_else", description: "\"node_else\"" },
        peg$c509 = "node_endif",
        peg$c510 = { type: "literal", value: "node_endif", description: "\"node_endif\"" },
        peg$c511 = function(dir) { 
            var source_str = "#" + dir[2] + " " + dir[3];
            return common_node({
              node: "node_directive",
              type: "node_condition",
              subtype: dir[2],
              source_str: source_str
            });
          },
        peg$c512 = "nodes_global",
        peg$c513 = { type: "literal", value: "nodes_global", description: "\"nodes_global\"" },
        peg$c514 = "nodes_main",
        peg$c515 = { type: "literal", value: "nodes_main", description: "\"nodes_main\"" },
        peg$c516 = function(type) {
            return common_node({
              node: "node_directive",
              type: type
            });
          },
        peg$c517 = "node",
        peg$c518 = { type: "literal", value: "node", description: "\"node\"" },
        peg$c519 = function(id) {
            return common_node({
              node: "node_directive",
              type: "node",
              name: id.name
            });
          },
        peg$c520 = "endnode",
        peg$c521 = { type: "literal", value: "endnode", description: "\"endnode\"" },
        peg$c522 = function() {
            return common_node({
              node: "node_directive",
              type: "endnode",
            });
          },
        peg$c523 = "node_in",
        peg$c524 = { type: "literal", value: "node_in", description: "\"node_in\"" },
        peg$c525 = "node_out",
        peg$c526 = { type: "literal", value: "node_out", description: "\"node_out\"" },
        peg$c527 = "node_param",
        peg$c528 = { type: "literal", value: "node_param", description: "\"node_param\"" },
        peg$c529 = "optional",
        peg$c530 = { type: "literal", value: "optional", description: "\"optional\"" },
        peg$c531 = function(type, opt, decl_type, id) {
            return common_node({
              node: "node_directive",
              type: type,
              decl_type: decl_type,
              identifier: id,
              is_optional: Boolean(opt)
            });
          },
        peg$c532 = "lamps_main",
        peg$c533 = { type: "literal", value: "lamps_main", description: "\"lamps_main\"" },
        peg$c534 = function() {
            return common_node({
              node: "lamp_directive",
              type: "lamps_main"
            });
          },
        peg$c535 = "lamp",
        peg$c536 = { type: "literal", value: "lamp", description: "\"lamp\"" },
        peg$c537 = function(id) {
            return common_node({
              node: "lamp_directive",
              type: "lamp",
              name: id.name
            });
          },
        peg$c538 = "endlamp",
        peg$c539 = { type: "literal", value: "endlamp", description: "\"endlamp\"" },
        peg$c540 = function() {
            return common_node({
              node: "lamp_directive",
              type: "endlamp",
            });
          },
        peg$c541 = "include_end",
        peg$c542 = { type: "literal", value: "include_end", description: "\"include_end\"" },
        peg$c543 = "include",
        peg$c544 = { type: "literal", value: "include", description: "\"include\"" },
        peg$c545 = function(type, name_symbols) {
            var name = name_symbols.map(function(el) { return el[1] }).join("");
            return common_node({
              node: "include",
              type: type,
              name: name
            });
          },
        peg$c546 = "import",
        peg$c547 = { type: "literal", value: "import", description: "\"import\"" },
        peg$c548 = "export",
        peg$c549 = { type: "literal", value: "export", description: "\"export\"" },
        peg$c550 = function(node, toks) {
            var tokens = [];

            if (toks !== null)
              for (var i = 0; i < toks.length; i++)
                tokens.push(toks[i][1].name);

            return common_node({
              node: node,
              tokens: tokens
            });
          },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsetranslation_unit();
      if (s1 === peg$FAILED) {
        s1 = peg$parseEOF();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetranslation_unit() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexternal_declaration();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsetranslation_unit();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsetranslation_unit();
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c1(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$currPos;
        s3 = peg$parsecomment();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseline_terminator_sequence();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$currPos;
            s3 = peg$parsecomment();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseline_terminator_sequence();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c2();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseexternal_declaration() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsefunction_definition();
      if (s1 === peg$FAILED) {
        s1 = peg$parsedeclaration();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c3(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedeclaration() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsefunction_declarator();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSEMICOLON();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c4(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseinit_declarator_list();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSEMICOLON();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c5(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsePRECISION();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseMMS();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseprecision_qualifier();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseMMS();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsetype_specifier_no_prec();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseSEMICOLON();
                      if (s7 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c6(s1, s3, s5, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parseinit_declarator_list() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

      s0 = peg$currPos;
      s1 = peg$parsesingle_declaration();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseIDENTIFIER();
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseLEFT_BRACKET();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse__();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parseconditional_expression();
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parse__();
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parseRIGHT_BRACKET();
                          if (s14 !== peg$FAILED) {
                            peg$reportedPos = s8;
                            s9 = peg$c7(s10, s12, s14);
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 === peg$FAILED) {
                  s8 = peg$currPos;
                  s9 = peg$parse__();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseEQUAL();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parse__();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parseassignment_expression();
                        if (s12 !== peg$FAILED) {
                          peg$reportedPos = s8;
                          s9 = peg$c8(s10, s12);
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                }
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                if (s8 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7, s8];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseIDENTIFIER();
                if (s7 !== peg$FAILED) {
                  s8 = peg$currPos;
                  s9 = peg$parse__();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseLEFT_BRACKET();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parse__();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parseconditional_expression();
                        if (s12 !== peg$FAILED) {
                          s13 = peg$parse__();
                          if (s13 !== peg$FAILED) {
                            s14 = peg$parseRIGHT_BRACKET();
                            if (s14 !== peg$FAILED) {
                              peg$reportedPos = s8;
                              s9 = peg$c7(s10, s12, s14);
                              s8 = s9;
                            } else {
                              peg$currPos = s8;
                              s8 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 === peg$FAILED) {
                    s8 = peg$currPos;
                    s9 = peg$parse__();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseEQUAL();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parse__();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parseassignment_expression();
                          if (s12 !== peg$FAILED) {
                            peg$reportedPos = s8;
                            s9 = peg$c8(s10, s12);
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  }
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7, s8];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c9(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesingle_declaration() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseINVARIANT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMMS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIDENTIFIER();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c10(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsefully_specified_type();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseMMS();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIDENTIFIER();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseLEFT_BRACKET();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse__();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseconditional_expression();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse__();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseRIGHT_BRACKET();
                        if (s11 !== peg$FAILED) {
                          peg$reportedPos = s5;
                          s6 = peg$c7(s7, s9, s11);
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parse__();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseEQUAL();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse__();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseassignment_expression();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s5;
                        s6 = peg$c8(s7, s9);
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c11(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsefunction_definition() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsefunction_head();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefunction_scope();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c12(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefunction_head() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsefully_specified_type();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMMS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIDENTIFIER();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c13(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefunction_scope() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsefunction_parameters();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecompound_statement_no_new_scope();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c14(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefunction_parameters() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseLEFT_PAREN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseVOID();
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseparameter_declaration();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseCOMMA();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse__();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseparameter_declaration();
                    if (s10 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                s7 = peg$parse__();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseCOMMA();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse__();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseparameter_declaration();
                      if (s10 !== peg$FAILED) {
                        s7 = [s7, s8, s9, s10];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c15(s4, s5);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$c16;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRIGHT_PAREN();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c17(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefunction_declarator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsefunction_head();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefunction_parameters();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c18(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseparameter_declaration() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsetype_qualifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseMMS();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseparameter_qualifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseMMS();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseparameter_declarator();
          if (s3 === peg$FAILED) {
            s3 = peg$parseparameter_type_specifier();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c19(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseparameter_declarator() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parsetype_specifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMMS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIDENTIFIER();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseLEFT_BRACKET();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse__();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseconditional_expression();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse__();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseRIGHT_BRACKET();
                      if (s10 !== peg$FAILED) {
                        s5 = [s5, s6, s7, s8, s9, s10];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c20(s1, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefunction_call() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsefunction_call_header_no_parameters();
      if (s1 === peg$FAILED) {
        s1 = peg$parsefunction_call_header_with_parameters();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c21(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefunction_call_header_no_parameters() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsefunction_call_header();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseVOID();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseRIGHT_PAREN();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c22(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefunction_call_header_with_parameters() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parsefunction_call_header();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseassignment_expression();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$parse__();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseCOMMA();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseassignment_expression();
                  if (s10 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseCOMMA();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse__();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseassignment_expression();
                    if (s10 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRIGHT_PAREN();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c23(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefunction_call_header() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsefunction_identifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLEFT_PAREN();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c24(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefunction_identifier() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseconstructor_identifier();
      if (s1 === peg$FAILED) {
        s1 = peg$parseIDENTIFIER();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c25(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestruct_specifier() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseSTRUCT();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseMMS();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseTYPE_NAME();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseLEFT_BRACE();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse__();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestruct_declaration_list();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse__();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseRIGHT_BRACE();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c26(s1, s2, s4, s6, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestruct_declaration_list() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsestruct_declaration();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          peg$reportedPos = s2;
          s3 = peg$c27(s3);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$parsestruct_declaration();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s2;
              s3 = peg$c27(s3);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c28(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestruct_declaration() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsetype_specifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMMS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestruct_declarator_list();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSEMICOLON();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c29(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestruct_declarator_list() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsestruct_declarator();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsestruct_declarator();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsestruct_declarator();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c30(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestruct_declarator() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseIDENTIFIER();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseLEFT_BRACKET();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseconditional_expression();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse__();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseRIGHT_BRACKET();
                  if (s8 !== peg$FAILED) {
                    s3 = [s3, s4, s5, s6, s7, s8];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c31(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseexpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseassignment_expression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseassignment_expression();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c32(s5, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseassignment_expression();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c32(s5, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c33(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseassignment_expression() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseunary_expression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseassignment_operator();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseassignment_expression();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c34(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseconditional_expression();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c35(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseconditional_expression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parselogical_or_expression();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseQUESTION();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseexpression();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse__();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseCOLON();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse__();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseassignment_expression();
                      if (s10 !== peg$FAILED) {
                        s3 = [s3, s4, s5, s6, s7, s8, s9, s10];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c36(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parselogical_or_expression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parselogical_xor_expression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseOR_OP();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parselogical_xor_expression();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c37(s5, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseOR_OP();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parselogical_xor_expression();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c37(s5, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c38(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parselogical_xor_expression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parselogical_and_expression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseXOR_OP();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parselogical_and_expression();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c37(s5, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseXOR_OP();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parselogical_and_expression();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c37(s5, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c39(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parselogical_and_expression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseequality_expression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseAND_OP();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseequality_expression();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c37(s5, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseAND_OP();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseequality_expression();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c37(s5, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c40(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseequality_expression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parserelational_expression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseEQ_OP();
          if (s5 === peg$FAILED) {
            s5 = peg$parseNE_OP();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parserelational_expression();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c37(s5, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseEQ_OP();
            if (s5 === peg$FAILED) {
              s5 = peg$parseNE_OP();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parserelational_expression();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c37(s5, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c41(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserelational_expression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseadditive_expression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseLE_OP();
          if (s5 === peg$FAILED) {
            s5 = peg$parseGE_OP();
            if (s5 === peg$FAILED) {
              s5 = peg$parseLEFT_ANGLE();
              if (s5 === peg$FAILED) {
                s5 = peg$parseRIGHT_ANGLE();
              }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseadditive_expression();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c37(s5, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseLE_OP();
            if (s5 === peg$FAILED) {
              s5 = peg$parseGE_OP();
              if (s5 === peg$FAILED) {
                s5 = peg$parseLEFT_ANGLE();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseRIGHT_ANGLE();
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseadditive_expression();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c37(s5, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseadditive_expression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsemultiplicative_expression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsePLUS();
          if (s5 === peg$FAILED) {
            s5 = peg$parseDASH();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsemultiplicative_expression();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c37(s5, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsePLUS();
            if (s5 === peg$FAILED) {
              s5 = peg$parseDASH();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsemultiplicative_expression();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c37(s5, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c43(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemultiplicative_expression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseunary_expression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSTAR();
          if (s5 === peg$FAILED) {
            s5 = peg$parseSLASH();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseunary_expression();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c37(s5, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSTAR();
            if (s5 === peg$FAILED) {
              s5 = peg$parseSLASH();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseunary_expression();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c37(s5, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c44(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseunary_expression() {
      var s0, s1, s2, s3;

      s0 = peg$parsepostfix_expression();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseINC_OP();
        if (s1 === peg$FAILED) {
          s1 = peg$parseDEC_OP();
          if (s1 === peg$FAILED) {
            s1 = peg$parseunary_operator();
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseunary_expression();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c45(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsepostfix_expression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parsefunction_call();
      if (s1 === peg$FAILED) {
        s1 = peg$parseprimary_expression();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = peg$parseLEFT_BRACKET();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse__();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseexpression();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseRIGHT_BRACKET();
                  if (s10 !== peg$FAILED) {
                    peg$reportedPos = s5;
                    s6 = peg$c46(s6, s8, s10);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = peg$parseFIELD_SELECTION();
            if (s5 === peg$FAILED) {
              s5 = peg$parseINC_OP();
              if (s5 === peg$FAILED) {
                s5 = peg$parseDEC_OP();
              }
            }
          }
          if (s5 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c47(s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseLEFT_BRACKET();
            if (s6 !== peg$FAILED) {
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseexpression();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse__();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseRIGHT_BRACKET();
                    if (s10 !== peg$FAILED) {
                      peg$reportedPos = s5;
                      s6 = peg$c46(s6, s8, s10);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = peg$parseFIELD_SELECTION();
              if (s5 === peg$FAILED) {
                s5 = peg$parseINC_OP();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseDEC_OP();
                }
              }
            }
            if (s5 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c47(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c48(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseprimary_expression() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseFLOATCONSTANT();
      if (s1 === peg$FAILED) {
        s1 = peg$parseINTCONSTANT();
        if (s1 === peg$FAILED) {
          s1 = peg$parseBOOLCONSTANT();
          if (s1 === peg$FAILED) {
            s1 = peg$parseIDENTIFIER();
            if (s1 === peg$FAILED) {
              s1 = peg$parseparen_expression();
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c49(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseparen_expression() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseLEFT_PAREN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRIGHT_PAREN();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c50(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecompound_statement_no_new_scope() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseLEFT_BRACE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestatement_list();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRIGHT_BRACE();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c51(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestatement_list() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsestatement_no_new_scope();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          peg$reportedPos = s2;
          s3 = peg$c52(s3);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsestatement_no_new_scope();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c52(s3);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c53(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestatement_no_new_scope() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsecompound_statement_with_scope();
      if (s1 === peg$FAILED) {
        s1 = peg$parsesimple_statement();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c54(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecompound_statement_with_scope() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseLEFT_BRACE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestatement_list();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRIGHT_BRACE();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c55(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesimple_statement() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseexpression_statement();
      if (s1 === peg$FAILED) {
        s1 = peg$parsedeclaration_statement();
        if (s1 === peg$FAILED) {
          s1 = peg$parseselection_statement();
          if (s1 === peg$FAILED) {
            s1 = peg$parseiteration_statement();
            if (s1 === peg$FAILED) {
              s1 = peg$parsejump_statement();
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c56(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedeclaration_statement() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsedeclaration();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c57(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseexpression_statement() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseexpression();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSEMICOLON();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c58(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseselection_statement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseIF();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLEFT_PAREN();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexpression();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseRIGHT_PAREN();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse__();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseselection_rest_statement();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c59(s1, s3, s5, s7, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseselection_rest_statement() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsestatement_with_scope();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseELSE();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsestatement_with_scope();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c60(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestatement_with_scope() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsecompound_statement_no_new_scope();
      if (s1 === peg$FAILED) {
        s1 = peg$parsesimple_statement();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c61(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseiteration_statement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      s1 = peg$parseWHILE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLEFT_PAREN();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecondition();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseRIGHT_PAREN();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse__();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsecompound_statement_no_new_scope();
                      if (s9 === peg$FAILED) {
                        s9 = peg$parsesimple_statement();
                      }
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c62(s1, s3, s5, s7, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDO();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsecompound_statement_no_new_scope();
            if (s3 === peg$FAILED) {
              s3 = peg$parsesimple_statement();
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse__();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseWHILE();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse__();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseLEFT_PAREN();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse__();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseexpression();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parse__();
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parseRIGHT_PAREN();
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parse__();
                              if (s12 !== peg$FAILED) {
                                s13 = peg$parseSEMICOLON();
                                if (s13 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c63(s1, s3, s5, s7, s9, s11, s13);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseFOR();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseLEFT_PAREN();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsefor_init_statement();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsefor_rest_statement();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse__();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parseRIGHT_PAREN();
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parse__();
                            if (s10 !== peg$FAILED) {
                              s11 = peg$parsecompound_statement_no_new_scope();
                              if (s11 === peg$FAILED) {
                                s11 = peg$parsesimple_statement();
                              }
                              if (s11 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c64(s1, s3, s5, s7, s9, s11);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parsecondition() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsefully_specified_type();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseMMS();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseIDENTIFIER();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseEQUAL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse__();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseassignment_expression();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s1;
                    s2 = peg$c65(s2, s4, s6, s8);
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$parseexpression();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c66(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefor_init_statement() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseexpression_statement();
      if (s1 === peg$FAILED) {
        s1 = peg$parsedeclaration_statement();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c67(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefor_rest_statement() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsecondition();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSEMICOLON();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexpression();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c68(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsejump_statement() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseCONTINUE();
      if (s1 === peg$FAILED) {
        s1 = peg$parseBREAK();
        if (s1 === peg$FAILED) {
          s1 = peg$parseRETURN();
          if (s1 === peg$FAILED) {
            s1 = peg$parseDISCARD();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSEMICOLON();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c69(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseRETURN();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseexpression();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse__();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseSEMICOLON();
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c70(s1, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsetype_specifier() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseprecision_qualifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseMMS();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetype_specifier_no_prec();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c71(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseparameter_type_specifier() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsetype_specifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseLEFT_BRACKET();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseconditional_expression();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse__();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseRIGHT_BRACKET();
                  if (s8 !== peg$FAILED) {
                    s3 = [s3, s4, s5, s6, s7, s8];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c72(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefully_specified_type() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsetype_qualifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseMMS();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetype_specifier();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c73(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetype_qualifier() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseCONST();
      if (s1 === peg$FAILED) {
        s1 = peg$parseATTRIBUTE();
        if (s1 === peg$FAILED) {
          s1 = peg$parseVARYING();
          if (s1 === peg$FAILED) {
            s1 = peg$parseUNIFORM();
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              s2 = peg$currPos;
              s3 = peg$parseINVARIANT();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseMMS();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseVARYING();
                  if (s5 !== peg$FAILED) {
                    s3 = [s3, s4, s5];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s1;
                s2 = peg$c74(s2);
              }
              s1 = s2;
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c75(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseparameter_qualifier() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseINOUT();
      if (s1 === peg$FAILED) {
        s1 = peg$parseIN();
        if (s1 === peg$FAILED) {
          s1 = peg$parseOUT();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c76(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseprecision_qualifier() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseLOW_PRECISION();
      if (s1 === peg$FAILED) {
        s1 = peg$parseMEDIUM_PRECISION();
        if (s1 === peg$FAILED) {
          s1 = peg$parseHIGH_PRECISION();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c77(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseassignment_operator() {
      var s0;

      s0 = peg$parseEQUAL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMUL_ASSIGN();
        if (s0 === peg$FAILED) {
          s0 = peg$parseDIV_ASSIGN();
          if (s0 === peg$FAILED) {
            s0 = peg$parseADD_ASSIGN();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSUB_ASSIGN();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseunary_operator() {
      var s0;

      s0 = peg$parsePLUS();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDASH();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBANG();
        }
      }

      return s0;
    }

    function peg$parsetype_specifier_no_prec() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseVOID();
      if (s1 === peg$FAILED) {
        s1 = peg$parseFLOAT();
        if (s1 === peg$FAILED) {
          s1 = peg$parseINT();
          if (s1 === peg$FAILED) {
            s1 = peg$parseBOOL();
            if (s1 === peg$FAILED) {
              s1 = peg$parseVEC2();
              if (s1 === peg$FAILED) {
                s1 = peg$parseVEC3();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseVEC4();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseBVEC2();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseBVEC3();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseBVEC4();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseIVEC2();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parseIVEC3();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parseIVEC4();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parseMAT2();
                                if (s1 === peg$FAILED) {
                                  s1 = peg$parseMAT3();
                                  if (s1 === peg$FAILED) {
                                    s1 = peg$parseMAT4();
                                    if (s1 === peg$FAILED) {
                                      s1 = peg$parseSAMPLER2D();
                                      if (s1 === peg$FAILED) {
                                        s1 = peg$parseSAMPLERCUBE();
                                        if (s1 === peg$FAILED) {
                                          s1 = peg$parsestruct_specifier();
                                          if (s1 === peg$FAILED) {
                                            s1 = peg$parseTYPE_NAME();
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c78(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseconstructor_identifier() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseFLOAT();
      if (s1 === peg$FAILED) {
        s1 = peg$parseINT();
        if (s1 === peg$FAILED) {
          s1 = peg$parseBOOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseVEC2();
            if (s1 === peg$FAILED) {
              s1 = peg$parseVEC3();
              if (s1 === peg$FAILED) {
                s1 = peg$parseVEC4();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseBVEC2();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseBVEC3();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseBVEC4();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseIVEC2();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseIVEC3();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parseIVEC4();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parseMAT2();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parseMAT3();
                                if (s1 === peg$FAILED) {
                                  s1 = peg$parseMAT4();
                                  if (s1 === peg$FAILED) {
                                    s1 = peg$parseTYPE_NAME();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIDENTIFIER();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c79(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIDENTIFIER() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$currPos;
      s3 = peg$parseRESERVED();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parsenondigit();
        if (s5 === peg$FAILED) {
          s5 = peg$parsedigit();
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parsenondigit();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsenondigit();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsenondigit();
          if (s5 === peg$FAILED) {
            s5 = peg$parsedigit();
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsenondigit();
            if (s5 === peg$FAILED) {
              s5 = peg$parsedigit();
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c80(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTYPE_NAME() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseIDENTIFIER();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c81(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFLOATCONSTANT() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsefractional_float();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexponent_part();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parsedigit_sequence_nonzero_lead();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexponent_part();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c82(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseINTCONSTANT() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsedecimal_int();
      if (s1 === peg$FAILED) {
        s1 = peg$parsehexadecimal_int();
        if (s1 === peg$FAILED) {
          s1 = peg$parseoctal_int();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c83(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBOOLCONSTANT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c84) {
        s1 = peg$c84;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c85); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c86) {
          s1 = peg$c86;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c87); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c88(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFIELD_SELECTION() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDOT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIDENTIFIER();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c89(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseRESERVED() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseATTRIBUTE();
      if (s1 === peg$FAILED) {
        s1 = peg$parseCONST();
        if (s1 === peg$FAILED) {
          s1 = peg$parseUNIFORM();
          if (s1 === peg$FAILED) {
            s1 = peg$parseVARYING();
            if (s1 === peg$FAILED) {
              s1 = peg$parseBREAK();
              if (s1 === peg$FAILED) {
                s1 = peg$parseCONTINUE();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseDO();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseFOR();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseWHILE();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseIF();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseELSE();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parseIN();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parseOUT();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parseINOUT();
                                if (s1 === peg$FAILED) {
                                  s1 = peg$parseFLOAT();
                                  if (s1 === peg$FAILED) {
                                    s1 = peg$parseINT();
                                    if (s1 === peg$FAILED) {
                                      s1 = peg$parseVOID();
                                      if (s1 === peg$FAILED) {
                                        s1 = peg$parseBOOL();
                                        if (s1 === peg$FAILED) {
                                          s1 = peg$parseLOW_PRECISION();
                                          if (s1 === peg$FAILED) {
                                            s1 = peg$parseMEDIUM_PRECISION();
                                            if (s1 === peg$FAILED) {
                                              s1 = peg$parseHIGH_PRECISION();
                                              if (s1 === peg$FAILED) {
                                                s1 = peg$parsePRECISION();
                                                if (s1 === peg$FAILED) {
                                                  s1 = peg$parseINVARIANT();
                                                  if (s1 === peg$FAILED) {
                                                    s1 = peg$parseDISCARD();
                                                    if (s1 === peg$FAILED) {
                                                      s1 = peg$parseRETURN();
                                                      if (s1 === peg$FAILED) {
                                                        s1 = peg$parseMAT2();
                                                        if (s1 === peg$FAILED) {
                                                          s1 = peg$parseMAT3();
                                                          if (s1 === peg$FAILED) {
                                                            s1 = peg$parseMAT4();
                                                            if (s1 === peg$FAILED) {
                                                              s1 = peg$parseVEC2();
                                                              if (s1 === peg$FAILED) {
                                                                s1 = peg$parseVEC3();
                                                                if (s1 === peg$FAILED) {
                                                                  s1 = peg$parseVEC4();
                                                                  if (s1 === peg$FAILED) {
                                                                    s1 = peg$parseIVEC2();
                                                                    if (s1 === peg$FAILED) {
                                                                      s1 = peg$parseIVEC3();
                                                                      if (s1 === peg$FAILED) {
                                                                        s1 = peg$parseIVEC4();
                                                                        if (s1 === peg$FAILED) {
                                                                          s1 = peg$parseBVEC2();
                                                                          if (s1 === peg$FAILED) {
                                                                            s1 = peg$parseBVEC3();
                                                                            if (s1 === peg$FAILED) {
                                                                              s1 = peg$parseBVEC4();
                                                                              if (s1 === peg$FAILED) {
                                                                                s1 = peg$parseSAMPLER2D();
                                                                                if (s1 === peg$FAILED) {
                                                                                  s1 = peg$parseSAMPLERCUBE();
                                                                                  if (s1 === peg$FAILED) {
                                                                                    s1 = peg$parseSTRUCT();
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c90(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c91) {
          s0 = peg$c91;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c92); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c93) {
            s0 = peg$c93;
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c94); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c95) {
              s0 = peg$c95;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c96); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c97) {
                s0 = peg$c97;
                peg$currPos += 4;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c98); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c99) {
                  s0 = peg$c99;
                  peg$currPos += 7;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c100); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 8) === peg$c101) {
                    s0 = peg$c101;
                    peg$currPos += 8;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c102); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c103) {
                      s0 = peg$c103;
                      peg$currPos += 4;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c104); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 6) === peg$c105) {
                        s0 = peg$c105;
                        peg$currPos += 6;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c106); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c107) {
                          s0 = peg$c107;
                          peg$currPos += 4;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c108); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 6) === peg$c109) {
                            s0 = peg$c109;
                            peg$currPos += 6;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c110); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 7) === peg$c111) {
                              s0 = peg$c111;
                              peg$currPos += 7;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c112); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 6) === peg$c113) {
                                s0 = peg$c113;
                                peg$currPos += 6;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c114); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 8) === peg$c115) {
                                  s0 = peg$c115;
                                  peg$currPos += 8;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c116); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 8) === peg$c117) {
                                    s0 = peg$c117;
                                    peg$currPos += 8;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c118); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 6) === peg$c119) {
                                      s0 = peg$c119;
                                      peg$currPos += 6;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c120); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 6) === peg$c121) {
                                        s0 = peg$c121;
                                        peg$currPos += 6;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c122); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 6) === peg$c123) {
                                          s0 = peg$c123;
                                          peg$currPos += 6;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c124); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 8) === peg$c125) {
                                            s0 = peg$c125;
                                            peg$currPos += 8;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c126); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 9) === peg$c127) {
                                              s0 = peg$c127;
                                              peg$currPos += 9;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c128); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 4) === peg$c129) {
                                                s0 = peg$c129;
                                                peg$currPos += 4;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c130); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 4) === peg$c131) {
                                                  s0 = peg$c131;
                                                  peg$currPos += 4;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c132); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 5) === peg$c133) {
                                                    s0 = peg$c133;
                                                    peg$currPos += 5;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c134); }
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 6) === peg$c135) {
                                                      s0 = peg$c135;
                                                      peg$currPos += 6;
                                                    } else {
                                                      s0 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c136); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 4) === peg$c137) {
                                                        s0 = peg$c137;
                                                        peg$currPos += 4;
                                                      } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c138); }
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 5) === peg$c139) {
                                                          s0 = peg$c139;
                                                          peg$currPos += 5;
                                                        } else {
                                                          s0 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c140); }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 8) === peg$c141) {
                                                            s0 = peg$c141;
                                                            peg$currPos += 8;
                                                          } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c142); }
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 6) === peg$c143) {
                                                              s0 = peg$c143;
                                                              peg$currPos += 6;
                                                            } else {
                                                              s0 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c144); }
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 5) === peg$c145) {
                                                                s0 = peg$c145;
                                                                peg$currPos += 5;
                                                              } else {
                                                                s0 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c146); }
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 6) === peg$c147) {
                                                                  s0 = peg$c147;
                                                                  peg$currPos += 6;
                                                                } else {
                                                                  s0 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c148); }
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  if (input.substr(peg$currPos, 5) === peg$c149) {
                                                                    s0 = peg$c149;
                                                                    peg$currPos += 5;
                                                                  } else {
                                                                    s0 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c150); }
                                                                  }
                                                                  if (s0 === peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 5) === peg$c151) {
                                                                      s0 = peg$c151;
                                                                      peg$currPos += 5;
                                                                    } else {
                                                                      s0 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$c152); }
                                                                    }
                                                                    if (s0 === peg$FAILED) {
                                                                      if (input.substr(peg$currPos, 5) === peg$c153) {
                                                                        s0 = peg$c153;
                                                                        peg$currPos += 5;
                                                                      } else {
                                                                        s0 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c154); }
                                                                      }
                                                                      if (s0 === peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 5) === peg$c155) {
                                                                          s0 = peg$c155;
                                                                          peg$currPos += 5;
                                                                        } else {
                                                                          s0 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$c156); }
                                                                        }
                                                                        if (s0 === peg$FAILED) {
                                                                          if (input.substr(peg$currPos, 5) === peg$c157) {
                                                                            s0 = peg$c157;
                                                                            peg$currPos += 5;
                                                                          } else {
                                                                            s0 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c158); }
                                                                          }
                                                                          if (s0 === peg$FAILED) {
                                                                            if (input.substr(peg$currPos, 5) === peg$c159) {
                                                                              s0 = peg$c159;
                                                                              peg$currPos += 5;
                                                                            } else {
                                                                              s0 = peg$FAILED;
                                                                              if (peg$silentFails === 0) { peg$fail(peg$c160); }
                                                                            }
                                                                            if (s0 === peg$FAILED) {
                                                                              if (input.substr(peg$currPos, 5) === peg$c161) {
                                                                                s0 = peg$c161;
                                                                                peg$currPos += 5;
                                                                              } else {
                                                                                s0 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$c162); }
                                                                              }
                                                                              if (s0 === peg$FAILED) {
                                                                                if (input.substr(peg$currPos, 5) === peg$c163) {
                                                                                  s0 = peg$c163;
                                                                                  peg$currPos += 5;
                                                                                } else {
                                                                                  s0 = peg$FAILED;
                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c164); }
                                                                                }
                                                                                if (s0 === peg$FAILED) {
                                                                                  if (input.substr(peg$currPos, 5) === peg$c165) {
                                                                                    s0 = peg$c165;
                                                                                    peg$currPos += 5;
                                                                                  } else {
                                                                                    s0 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c166); }
                                                                                  }
                                                                                  if (s0 === peg$FAILED) {
                                                                                    if (input.substr(peg$currPos, 9) === peg$c167) {
                                                                                      s0 = peg$c167;
                                                                                      peg$currPos += 9;
                                                                                    } else {
                                                                                      s0 = peg$FAILED;
                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c168); }
                                                                                    }
                                                                                    if (s0 === peg$FAILED) {
                                                                                      if (input.substr(peg$currPos, 9) === peg$c169) {
                                                                                        s0 = peg$c169;
                                                                                        peg$currPos += 9;
                                                                                      } else {
                                                                                        s0 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c170); }
                                                                                      }
                                                                                      if (s0 === peg$FAILED) {
                                                                                        if (input.substr(peg$currPos, 15) === peg$c171) {
                                                                                          s0 = peg$c171;
                                                                                          peg$currPos += 15;
                                                                                        } else {
                                                                                          s0 = peg$FAILED;
                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c172); }
                                                                                        }
                                                                                        if (s0 === peg$FAILED) {
                                                                                          if (input.substr(peg$currPos, 15) === peg$c173) {
                                                                                            s0 = peg$c173;
                                                                                            peg$currPos += 15;
                                                                                          } else {
                                                                                            s0 = peg$FAILED;
                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c174); }
                                                                                          }
                                                                                          if (s0 === peg$FAILED) {
                                                                                            if (input.substr(peg$currPos, 13) === peg$c175) {
                                                                                              s0 = peg$c175;
                                                                                              peg$currPos += 13;
                                                                                            } else {
                                                                                              s0 = peg$FAILED;
                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c176); }
                                                                                            }
                                                                                            if (s0 === peg$FAILED) {
                                                                                              if (input.substr(peg$currPos, 13) === peg$c177) {
                                                                                                s0 = peg$c177;
                                                                                                peg$currPos += 13;
                                                                                              } else {
                                                                                                s0 = peg$FAILED;
                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c178); }
                                                                                              }
                                                                                              if (s0 === peg$FAILED) {
                                                                                                if (input.substr(peg$currPos, 19) === peg$c179) {
                                                                                                  s0 = peg$c179;
                                                                                                  peg$currPos += 19;
                                                                                                } else {
                                                                                                  s0 = peg$FAILED;
                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c180); }
                                                                                                }
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  if (input.substr(peg$currPos, 6) === peg$c181) {
                                                                                                    s0 = peg$c181;
                                                                                                    peg$currPos += 6;
                                                                                                  } else {
                                                                                                    s0 = peg$FAILED;
                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c182); }
                                                                                                  }
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    if (input.substr(peg$currPos, 4) === peg$c183) {
                                                                                                      s0 = peg$c183;
                                                                                                      peg$currPos += 4;
                                                                                                    } else {
                                                                                                      s0 = peg$FAILED;
                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c184); }
                                                                                                    }
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      if (input.substr(peg$currPos, 9) === peg$c185) {
                                                                                                        s0 = peg$c185;
                                                                                                        peg$currPos += 9;
                                                                                                      } else {
                                                                                                        s0 = peg$FAILED;
                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c186); }
                                                                                                      }
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        if (input.substr(peg$currPos, 5) === peg$c187) {
                                                                                                          s0 = peg$c187;
                                                                                                          peg$currPos += 5;
                                                                                                        } else {
                                                                                                          s0 = peg$FAILED;
                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c188); }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsePLUS() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c189;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c190); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c191(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDASH() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c192;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c193); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c194(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSTAR() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 42) {
        s1 = peg$c195;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c196); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c197(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSLASH() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s1 = peg$c198;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c199); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c200(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseINC_OP() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c201) {
        s1 = peg$c201;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c202); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c203(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDEC_OP() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c204) {
        s1 = peg$c204;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c205); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c206(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseEQUAL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 61) {
        s1 = peg$c207;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c208); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c209(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseMUL_ASSIGN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c210) {
        s1 = peg$c210;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c211); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c212(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDIV_ASSIGN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c213) {
        s1 = peg$c213;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c214); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c215(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseADD_ASSIGN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c216) {
        s1 = peg$c216;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c217); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c218(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSUB_ASSIGN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c219) {
        s1 = peg$c219;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c220); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c221(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLEFT_ANGLE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c222;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c223); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c224(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseRIGHT_ANGLE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 62) {
        s1 = peg$c225;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c226); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c227(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseEQ_OP() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c228) {
        s1 = peg$c228;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c229); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c209(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLE_OP() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c230) {
        s1 = peg$c230;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c231); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c232(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseGE_OP() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c233) {
        s1 = peg$c233;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c234); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c235(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBANG() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 33) {
        s1 = peg$c236;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c237); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c238(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseNE_OP() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c239) {
        s1 = peg$c239;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c240); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c241(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseAND_OP() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c242) {
        s1 = peg$c242;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c243); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c244(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOR_OP() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c245) {
        s1 = peg$c245;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c246); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c247(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseXOR_OP() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c248) {
        s1 = peg$c248;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c249); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c250(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTILDE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 126) {
        s1 = peg$c251;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c252); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c253(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsePERCENT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 37) {
        s1 = peg$c254;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c255); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c256(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLEFT_OP() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c257) {
        s1 = peg$c257;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c258); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c259(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseRIGHT_OP() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c260) {
        s1 = peg$c260;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c261); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c262(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseAMPERSAND() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 38) {
        s1 = peg$c263;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c264); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c265(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCARET() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 94) {
        s1 = peg$c266;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c267); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c268(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseVERTICAL_BAR() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 124) {
        s1 = peg$c269;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c270); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c271(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseMOD_ASSIGN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c272) {
        s1 = peg$c272;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c273); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c274(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLEFT_ASSIGN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c275) {
        s1 = peg$c275;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c276); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c277(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseRIGHT_ASSIGN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c278) {
        s1 = peg$c278;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c279); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c280(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseAND_ASSIGN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c281) {
        s1 = peg$c281;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c282); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c283(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseXOR_ASSIGN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c284) {
        s1 = peg$c284;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c285); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c286(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOR_ASSIGN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c287) {
        s1 = peg$c287;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c288); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c289(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseATTRIBUTE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c290) {
        s1 = peg$c290;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c291); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCONST() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c293) {
        s1 = peg$c293;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c294); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseUNIFORM() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c295) {
        s1 = peg$c295;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c296); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseVARYING() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c297) {
        s1 = peg$c297;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c298); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBREAK() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c299) {
        s1 = peg$c299;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c300); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCONTINUE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c301) {
        s1 = peg$c301;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c302); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDO() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c303) {
        s1 = peg$c303;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c304); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFOR() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c305) {
        s1 = peg$c305;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c306); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseWHILE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c307) {
        s1 = peg$c307;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c308); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIF() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c309) {
        s1 = peg$c309;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c310); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseELSE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c311) {
        s1 = peg$c311;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c312); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c313) {
        s1 = peg$c313;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c314); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOUT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c315) {
        s1 = peg$c315;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c316); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseINOUT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c317) {
        s1 = peg$c317;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c318); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFLOAT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c319) {
        s1 = peg$c319;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c320); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseINT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c321) {
        s1 = peg$c321;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c322); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseVOID() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c323) {
        s1 = peg$c323;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c324); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBOOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c325) {
        s1 = peg$c325;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c326); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLOW_PRECISION() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c327) {
        s1 = peg$c327;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c328); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseMEDIUM_PRECISION() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c329) {
        s1 = peg$c329;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c330); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseHIGH_PRECISION() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c331) {
        s1 = peg$c331;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c332); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsePRECISION() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c333) {
        s1 = peg$c333;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c334); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseINVARIANT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c335) {
        s1 = peg$c335;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c336); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDISCARD() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c337) {
        s1 = peg$c337;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c338); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseRETURN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c339) {
        s1 = peg$c339;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c340); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseMAT2() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c341) {
        s1 = peg$c341;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c342); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseMAT3() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c343) {
        s1 = peg$c343;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c344); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseMAT4() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c345) {
        s1 = peg$c345;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c346); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseVEC2() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c347) {
        s1 = peg$c347;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c348); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseVEC3() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c349) {
        s1 = peg$c349;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c350); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseVEC4() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c351) {
        s1 = peg$c351;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c352); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIVEC2() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c353) {
        s1 = peg$c353;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c354); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIVEC3() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c355) {
        s1 = peg$c355;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c356); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIVEC4() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c357) {
        s1 = peg$c357;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c358); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBVEC2() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c359) {
        s1 = peg$c359;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c360); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBVEC3() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c361) {
        s1 = peg$c361;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c362); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBVEC4() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c363) {
        s1 = peg$c363;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c364); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSAMPLER2D() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c365) {
        s1 = peg$c365;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c366); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSAMPLERCUBE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c367) {
        s1 = peg$c367;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c368); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSTRUCT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c369) {
        s1 = peg$c369;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c370); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c292(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLEFT_PAREN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c371;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c372); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c373(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseRIGHT_PAREN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 41) {
        s1 = peg$c374;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c375); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c376(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLEFT_BRACKET() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c377;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c378); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c379(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseRIGHT_BRACKET() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 93) {
        s1 = peg$c380;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c381); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c382(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLEFT_BRACE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c383;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c384); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c385(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseRIGHT_BRACE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 125) {
        s1 = peg$c386;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c387); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c388(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDOT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c389;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c390); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c391(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCOMMA() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s1 = peg$c392;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c393); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c394(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCOLON() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 58) {
        s1 = peg$c395;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c396); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c397(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSEMICOLON() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c398;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c399); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c400(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseQUESTION() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 63) {
        s1 = peg$c401;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c402); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c403(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenondigit() {
      var s0;

      if (peg$c404.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c405); }
      }

      return s0;
    }

    function peg$parsedigit() {
      var s0;

      if (peg$c406.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c407); }
      }

      return s0;
    }

    function peg$parseoct_digit() {
      var s0;

      if (peg$c408.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c409); }
      }

      return s0;
    }

    function peg$parsehex_digit() {
      var s0;

      if (peg$c410.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c411); }
      }

      return s0;
    }

    function peg$parsedigit_sequence() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsedigit();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsedigit();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c412(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedigit_sequence_nonzero_lead() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c413.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c414); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsedigit_sequence();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsedigit_sequence();
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c412(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseoct_digit_sequence() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseoct_digit();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseoct_digit();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c412(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsehex_digit_sequence() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsehex_digit();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsehex_digit();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c412(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedecimal_int() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsedigit_sequence_nonzero_lead();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c415(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsehexadecimal_int() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 48) {
        s2 = peg$c416;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c417); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$c418.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c419); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsehex_digit_sequence();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c420(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseoctal_int() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 48) {
        s2 = peg$c416;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c417); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseoct_digit_sequence();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseoct_digit_sequence();
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c421(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefractional_float() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c422.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c423); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$parsedigit_sequence_nonzero_lead();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c389;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c390); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsedigit_sequence();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c389;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c390); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedigit_sequence();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c412(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseexponent_part() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c424.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c425); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$c426.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c427); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsedigit_sequence();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c412(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecomment() {
      var s0;

      s0 = peg$parsemultiline_comment();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesingleline_comment();
      }

      return s0;
    }

    function peg$parsesingleline_comment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c428) {
        s1 = peg$c428;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c429); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseline_terminator();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c430); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseline_terminator();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c430); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemultiline_comment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c431) {
        s1 = peg$c431;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c432); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c433) {
          s5 = peg$c433;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c434); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c430); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c433) {
            s5 = peg$c433;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c434); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c430); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c433) {
            s3 = peg$c433;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c434); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c435(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemultiline_comment_no_line_terminator() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c431) {
        s1 = peg$c431;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c432); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c433) {
          s5 = peg$c433;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c434); }
        }
        if (s5 === peg$FAILED) {
          s5 = peg$parseline_terminator();
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c430); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c433) {
            s5 = peg$c433;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c434); }
          }
          if (s5 === peg$FAILED) {
            s5 = peg$parseline_terminator();
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c430); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c433) {
            s3 = peg$c433;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c434); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c435(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsewhitespace() {
      var s0;

      if (peg$c436.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c437); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 11) {
          s0 = peg$c438;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c439); }
        }
      }

      return s0;
    }

    function peg$parseline_terminator() {
      var s0;

      if (peg$c440.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c441); }
      }

      return s0;
    }

    function peg$parseline_terminator_sequence() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c442) {
        s0 = peg$c442;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c443); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c444) {
          s0 = peg$c444;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c445); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 10) {
            s0 = peg$c446;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c447); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 13) {
              s0 = peg$c448;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c449); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseline_continuation() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c450;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c451); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseline_terminator_sequence();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$parseline_terminator_sequence();
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c16;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseline_terminator_sequence();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parse__() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsewhitespace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseline_continuation();
        if (s1 === peg$FAILED) {
          s1 = peg$parseline_terminator_sequence();
          if (s1 === peg$FAILED) {
            s1 = peg$parsecomment();
          }
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsewhitespace();
        if (s1 === peg$FAILED) {
          s1 = peg$parseline_continuation();
          if (s1 === peg$FAILED) {
            s1 = peg$parseline_terminator_sequence();
            if (s1 === peg$FAILED) {
              s1 = peg$parsecomment();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseMMS() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsewhitespace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseline_continuation();
        if (s1 === peg$FAILED) {
          s1 = peg$parseline_terminator_sequence();
          if (s1 === peg$FAILED) {
            s1 = peg$parsecomment();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsewhitespace();
          if (s1 === peg$FAILED) {
            s1 = peg$parseline_continuation();
            if (s1 === peg$FAILED) {
              s1 = peg$parseline_terminator_sequence();
              if (s1 === peg$FAILED) {
                s1 = peg$parsecomment();
              }
            }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsewhitespace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseline_continuation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsesingleline_comment();
          if (s1 === peg$FAILED) {
            s1 = peg$parsemultiline_comment_no_line_terminator();
          }
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsewhitespace();
        if (s1 === peg$FAILED) {
          s1 = peg$parseline_continuation();
          if (s1 === peg$FAILED) {
            s1 = peg$parsesingleline_comment();
            if (s1 === peg$FAILED) {
              s1 = peg$parsemultiline_comment_no_line_terminator();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseMSS() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsewhitespace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseline_continuation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsesingleline_comment();
          if (s1 === peg$FAILED) {
            s1 = peg$parsemultiline_comment_no_line_terminator();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsewhitespace();
          if (s1 === peg$FAILED) {
            s1 = peg$parseline_continuation();
            if (s1 === peg$FAILED) {
              s1 = peg$parsesingleline_comment();
              if (s1 === peg$FAILED) {
                s1 = peg$parsemultiline_comment_no_line_terminator();
              }
            }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetill_string_end() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsecontinued_line();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsecontinued_line();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseline_no_term_count();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesingleline_comment();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseline_terminator_sequence();
            if (s4 === peg$FAILED) {
              s4 = peg$parseEOF();
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c452(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecontinued_line() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseline_no_term_count();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesingleline_comment();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseline_continuation();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c453(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseline_no_term_count() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parseline_terminator_sequence();
      if (s4 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s4 = peg$c450;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c451); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c428) {
            s4 = peg$c428;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c429); }
          }
        }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = void 0;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c430); }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseline_terminator_sequence();
        if (s4 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 92) {
            s4 = peg$c450;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c451); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c428) {
              s4 = peg$c428;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c429); }
            }
          }
        }
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c430); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c454(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseEOF() {
      var s0, s1;

      s0 = peg$currPos;
      peg$silentFails++;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c430); }
      }
      peg$silentFails--;
      if (s1 === peg$FAILED) {
        s0 = void 0;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseexpression_statement_start() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseexpression_statement();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c455(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestatement_no_new_scope_start() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsestatement_no_new_scope();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c456(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsepp_start() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsepp_unit();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsepp_unit();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c457(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepp_unit() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parsepp_replace();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepp_undef();
        if (s0 === peg$FAILED) {
          s0 = peg$parsepp_extension();
          if (s0 === peg$FAILED) {
            s0 = peg$parsepp_directives();
            if (s0 === peg$FAILED) {
              s0 = peg$parsepp_node_dir();
              if (s0 === peg$FAILED) {
                s0 = peg$parsepp_lamps_dir();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseinclude_dir_comment();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsepp_import_export();
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = [];
                      s2 = peg$currPos;
                      s3 = peg$currPos;
                      peg$silentFails++;
                      if (input.charCodeAt(peg$currPos) === 35) {
                        s4 = peg$c458;
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c459); }
                      }
                      if (s4 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c428) {
                          s4 = peg$c428;
                          peg$currPos += 2;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c429); }
                        }
                        if (s4 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c431) {
                            s4 = peg$c431;
                            peg$currPos += 2;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c432); }
                          }
                        }
                      }
                      peg$silentFails--;
                      if (s4 === peg$FAILED) {
                        s3 = void 0;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseIDENTIFIER();
                        if (s4 === peg$FAILED) {
                          s4 = peg$parseRESERVED();
                          if (s4 === peg$FAILED) {
                            if (input.length > peg$currPos) {
                              s4 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c430); }
                            }
                          }
                        }
                        if (s4 !== peg$FAILED) {
                          s3 = [s3, s4];
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                      if (s2 !== peg$FAILED) {
                        while (s2 !== peg$FAILED) {
                          s1.push(s2);
                          s2 = peg$currPos;
                          s3 = peg$currPos;
                          peg$silentFails++;
                          if (input.charCodeAt(peg$currPos) === 35) {
                            s4 = peg$c458;
                            peg$currPos++;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c459); }
                          }
                          if (s4 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c428) {
                              s4 = peg$c428;
                              peg$currPos += 2;
                            } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c429); }
                            }
                            if (s4 === peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c431) {
                                s4 = peg$c431;
                                peg$currPos += 2;
                              } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c432); }
                              }
                            }
                          }
                          peg$silentFails--;
                          if (s4 === peg$FAILED) {
                            s3 = void 0;
                          } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parseIDENTIFIER();
                            if (s4 === peg$FAILED) {
                              s4 = peg$parseRESERVED();
                              if (s4 === peg$FAILED) {
                                if (input.length > peg$currPos) {
                                  s4 = input.charAt(peg$currPos);
                                  peg$currPos++;
                                } else {
                                  s4 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c430); }
                                }
                              }
                            }
                            if (s4 !== peg$FAILED) {
                              s3 = [s3, s4];
                              s2 = s3;
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        }
                      } else {
                        s1 = peg$FAILED;
                      }
                      if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c460(s1);
                      }
                      s0 = s1;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsepp_replace() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s2 = peg$c458;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c459); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c461) {
            s4 = peg$c461;
            peg$currPos += 3;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c462); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c463) {
              s4 = peg$c463;
              peg$currPos += 6;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c464); }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseMSS();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseIDENTIFIER();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseMSS();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsetill_string_end();
                  if (s8 !== peg$FAILED) {
                    s2 = [s2, s3, s4, s5, s6, s7, s8];
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c465(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsepp_undef() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s2 = peg$c458;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c459); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c466) {
            s4 = peg$c466;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c467); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseMSS();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseIDENTIFIER();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetill_string_end();
                if (s7 !== peg$FAILED) {
                  s2 = [s2, s3, s4, s5, s6, s7];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c468(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsepp_extension() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c458;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c459); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c469) {
            s3 = peg$c469;
            peg$currPos += 9;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c470); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseMSS();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseIDENTIFIER();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s7 = peg$c395;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c396); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 7) === peg$c471) {
                        s9 = peg$c471;
                        peg$currPos += 7;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c472); }
                      }
                      if (s9 === peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c473) {
                          s9 = peg$c473;
                          peg$currPos += 6;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c474); }
                        }
                        if (s9 === peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c475) {
                            s9 = peg$c475;
                            peg$currPos += 4;
                          } else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c476); }
                          }
                          if (s9 === peg$FAILED) {
                            if (input.substr(peg$currPos, 7) === peg$c477) {
                              s9 = peg$c477;
                              peg$currPos += 7;
                            } else {
                              s9 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c478); }
                            }
                          }
                        }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsetill_string_end();
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c479(s5, s9);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepp_directives() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s2 = peg$c458;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c459); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c480) {
            s4 = peg$c480;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c481); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c482) {
              s4 = peg$c482;
              peg$currPos += 6;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c483); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c309) {
                s4 = peg$c309;
                peg$currPos += 2;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c310); }
              }
              if (s4 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c484) {
                  s4 = peg$c484;
                  peg$currPos += 4;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c485); }
                }
                if (s4 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c311) {
                    s4 = peg$c311;
                    peg$currPos += 4;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c312); }
                  }
                  if (s4 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c486) {
                      s4 = peg$c486;
                      peg$currPos += 5;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c487); }
                    }
                    if (s4 === peg$FAILED) {
                      if (input.substr(peg$currPos, 5) === peg$c488) {
                        s4 = peg$c488;
                        peg$currPos += 5;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c489); }
                      }
                      if (s4 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c490) {
                          s4 = peg$c490;
                          peg$currPos += 4;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c491); }
                        }
                        if (s4 === peg$FAILED) {
                          if (input.substr(peg$currPos, 6) === peg$c492) {
                            s4 = peg$c492;
                            peg$currPos += 6;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c493); }
                          }
                          if (s4 === peg$FAILED) {
                            if (input.substr(peg$currPos, 7) === peg$c494) {
                              s4 = peg$c494;
                              peg$currPos += 7;
                            } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c495); }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseline_terminator_sequence();
            if (s6 !== peg$FAILED) {
              peg$reportedPos = s5;
              s6 = peg$c496();
            }
            s5 = s6;
            if (s5 === peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseMSS();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetill_string_end();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s5;
                  s6 = peg$c497(s7);
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c498(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsepp_node_dir() {
      var s0;

      s0 = peg$parsenodes_insertion();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenodes_condition();
        if (s0 === peg$FAILED) {
          s0 = peg$parsenodes_parameters();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenode();
            if (s0 === peg$FAILED) {
              s0 = peg$parseendnode();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsenodes_condition() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s2 = peg$c458;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c459); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 10) === peg$c499) {
            s4 = peg$c499;
            peg$currPos += 10;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c500); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 11) === peg$c501) {
              s4 = peg$c501;
              peg$currPos += 11;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c502); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c503) {
                s4 = peg$c503;
                peg$currPos += 7;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c504); }
              }
              if (s4 === peg$FAILED) {
                if (input.substr(peg$currPos, 9) === peg$c505) {
                  s4 = peg$c505;
                  peg$currPos += 9;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c506); }
                }
                if (s4 === peg$FAILED) {
                  if (input.substr(peg$currPos, 9) === peg$c507) {
                    s4 = peg$c507;
                    peg$currPos += 9;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c508); }
                  }
                  if (s4 === peg$FAILED) {
                    if (input.substr(peg$currPos, 10) === peg$c509) {
                      s4 = peg$c509;
                      peg$currPos += 10;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c510); }
                    }
                  }
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseline_terminator_sequence();
            if (s6 !== peg$FAILED) {
              peg$reportedPos = s5;
              s6 = peg$c496();
            }
            s5 = s6;
            if (s5 === peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseMSS();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetill_string_end();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s5;
                  s6 = peg$c497(s7);
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c511(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenodes_insertion() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s2 = peg$c458;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c459); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 12) === peg$c512) {
              s4 = peg$c512;
              peg$currPos += 12;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c513); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c514) {
                s4 = peg$c514;
                peg$currPos += 10;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c515); }
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetill_string_end();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c516(s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenode() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s2 = peg$c458;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c459); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c517) {
              s4 = peg$c517;
              peg$currPos += 4;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c518); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseMSS();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseIDENTIFIER();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetill_string_end();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c519(s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseendnode() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s2 = peg$c458;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c459); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c520) {
              s4 = peg$c520;
              peg$currPos += 7;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c521); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetill_string_end();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c522();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenodes_parameters() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s2 = peg$c458;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c459); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c523) {
              s4 = peg$c523;
              peg$currPos += 7;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c524); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c525) {
                s4 = peg$c525;
                peg$currPos += 8;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c526); }
              }
              if (s4 === peg$FAILED) {
                if (input.substr(peg$currPos, 10) === peg$c527) {
                  s4 = peg$c527;
                  peg$currPos += 10;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c528); }
                }
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseMSS();
              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 8) === peg$c529) {
                  s7 = peg$c529;
                  peg$currPos += 8;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c530); }
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseMSS();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsefully_specified_type();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseMSS();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseIDENTIFIER();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c531(s4, s5, s7, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepp_lamps_dir() {
      var s0;

      s0 = peg$parselamps_insertion();
      if (s0 === peg$FAILED) {
        s0 = peg$parselamp();
        if (s0 === peg$FAILED) {
          s0 = peg$parseendlamp();
        }
      }

      return s0;
    }

    function peg$parselamps_insertion() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s2 = peg$c458;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c459); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 10) === peg$c532) {
              s4 = peg$c532;
              peg$currPos += 10;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c533); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetill_string_end();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c534();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parselamp() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s2 = peg$c458;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c459); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c535) {
              s4 = peg$c535;
              peg$currPos += 4;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c536); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseMSS();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseIDENTIFIER();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetill_string_end();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c537(s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseendlamp() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s2 = peg$c458;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c459); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c538) {
              s4 = peg$c538;
              peg$currPos += 7;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c539); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetill_string_end();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c540();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseinclude_dir_comment() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s2 = peg$c458;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c459); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 11) === peg$c541) {
              s4 = peg$c541;
              peg$currPos += 11;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c542); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c543) {
                s4 = peg$c543;
                peg$currPos += 7;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c544); }
              }
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 37) {
                s5 = peg$c254;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c255); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$currPos;
                s8 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 37) {
                  s9 = peg$c254;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c255); }
                }
                peg$silentFails--;
                if (s9 === peg$FAILED) {
                  s8 = void 0;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s9 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c430); }
                  }
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$currPos;
                    s8 = peg$currPos;
                    peg$silentFails++;
                    if (input.charCodeAt(peg$currPos) === 37) {
                      s9 = peg$c254;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c255); }
                    }
                    peg$silentFails--;
                    if (s9 === peg$FAILED) {
                      s8 = void 0;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.length > peg$currPos) {
                        s9 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c430); }
                      }
                      if (s9 !== peg$FAILED) {
                        s8 = [s8, s9];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  }
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 37) {
                    s7 = peg$c254;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c255); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c545(s4, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepp_import_export() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s2 = peg$c458;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c459); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c546) {
              s4 = peg$c546;
              peg$currPos += 6;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c547); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c548) {
                s4 = peg$c548;
                peg$currPos += 6;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c549); }
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$currPos;
              s7 = peg$parseMSS();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseIDENTIFIER();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                s7 = peg$parseMSS();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseIDENTIFIER();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsetill_string_end();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c550(s4, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    { 
      // Directives preprocessing
      function vardef_replace(units) {
        var repl = {};

        for (var i = 0; i < units.length; i++) {
          var unit = units[i][0];

          if (unit.node == "directive") {
            switch(unit.type) {
              case "var":
              case "define":
                repl[unit.repl.from] = unit.repl.to;
                break;
              case "undef":
                delete repl[unit.identifier];
                break;
            }
          }
          else if (unit.node == "text")
            for (var j = 0; j < unit.result.length; j++) {
              var token = unit.result[j];
              for (var from in repl)
                if (token == from) {
                  var to = vardef_recourse(repl[from], repl);
                  units[i][0].result[j] = "/*%replace%from%" + from 
                      + "%to%" + to + "%*/" + to + "/*%replace_end%*/";
                  break;
                }
          }
        }
        return units;
      }

      function vardef_recourse(text_to, repls) {
        for (var from in repls) {
          var to = repls[from];
          var expr_str = "(^|[^0-9a-zA-Z_])" + from + "([^0-9a-zA-Z_]|$)";
          var expr = new RegExp(expr_str, "g");
          text_to = text_to.replace(expr, "$1" + to + "$2");
        }

        return text_to;
      }

      function build_listing(units) {
        var listing = "";

        var nodes_collector = {
          current_node: null,
          nodes_structure: {},
        }

        var lamps_collector = {
          current_lamp: null,
          lamps_structure: {}
        }

        for (var i = 0; i < units.length; i++) {
          var unit = units[i][0];

          // usual directives
          if (unit.node == "directive")
            listing += "/*%directive%" + unit.source_str + "%directive_end%*/\n";

          // includes
          else if (unit.node == "include")
            listing += "/*%" + unit.type + "%" + unit.name + "%*/\n";

          // import/export tokens
          else if (unit.node == "import" || unit.node == "export")
            listing += build_import_export(unit.node, unit.tokens);

          // simple textlines
          else if (unit.node == "text")
            listing += build_textline(unit, nodes_collector, lamps_collector);

          // node directives
          else if (unit.node == "node_directive")
            listing += build_node_directive(unit, nodes_collector);

          // lamp directives
          else if (unit.node == "lamp_directive")
            listing += build_lamp_directive(unit, lamps_collector);
        }
        
        return listing;
      }



      function build_import_export(type, tokens) {
        return "/*%" + type + "%" + tokens.join() + "%*/";
      }

      function build_textline(unit, nodes_collector, lamps_collector) {
        var listing = "";

        // collect textlines if they are inside a #node or #lamp and append them 
        // later in #nodes_main or #lamps_main
        if (nodes_collector.current_node != null)
          nodes_collector.nodes_structure[nodes_collector.current_node].push(unit);
        else if (lamps_collector.current_lamp != null)
          lamps_collector.lamps_structure[lamps_collector.current_lamp].push(unit);

        // append to lisitng immediately if textlines are outside a node
        else
          for (var i = 0; i < unit.result.length; i++)
            listing += unit.result[i];

        return listing;
      }

      function build_node_directive(unit, nodes_collector) {
        var listing = "";

        if (unit.type != "node" && unit.type != "endnode" && unit.type != "nodes_global" 
            && unit.type != "nodes_main" && nodes_collector.current_node == null) {
          console.error("Warning! Outlier directive #" + unit.type);
          return listing;
        }
        switch (unit.type) {
          case "node":
            listing += "/*%" + unit.type + "%" + unit.name + "%*/\n";
            nodes_collector.current_node = unit.name;
            nodes_collector.nodes_structure[nodes_collector.current_node] = [];
            break;
          case "endnode":
            listing += "/*%" + unit.type + "%*/\n";
            nodes_collector.current_node = null;
            break;

          case "node_in":
          case "node_out":
          case "node_param":
            nodes_collector.nodes_structure[nodes_collector.current_node].push(unit);
            break;
          case "node_condition":
            // do not move node_condition to nodes_main or nodes_global
            listing += "/*%" + unit.type + "%" + unit.source_str + "%" + 
                nodes_collector.current_node + "%" + unit.offset + "%*/\n";
            break;

          case "nodes_main":
            listing += build_nodes_main(nodes_collector.nodes_structure);
            break;
          case "nodes_global":
            listing += build_nodes_global(nodes_collector.nodes_structure);
            break;
        }
        return listing;
      }

      function build_nodes_main(nodes_structure) {
        var listing = "/*%nodes_main%*/\n";
        var new_scope = true;
        for (var node_name in nodes_structure) {
          var node = nodes_structure[node_name];
          for (var j = 0; j < node.length; j++)
            switch (node[j].type) {
              case "node_in":
              case "node_out":
                listing += build_node_in_out_param(node_name, node[j]);
                break;
              case "textline":
                if (new_scope) {
                  listing += "{";
                  new_scope = false;
                }
                listing += build_node_textline(node_name, node, node[j]);
                break;
            }

          if (!new_scope) {
            listing += "}";
            new_scope = true;
          }
        }
        listing += "/*%nodes_main_end%*/\n";

        return listing;
      }

      function build_nodes_global(nodes_structure) {
        var listing = "/*%nodes_global%*/\n";
        for (var node_name in nodes_structure) {
          var node = nodes_structure[node_name];

          for (var j = 0; j < node.length; j++)
            if (node[j].type == "node_param")
              listing += build_node_in_out_param(node_name, node[j]);
        }
        listing += "/*%nodes_global_end%*/\n";

        return listing;
      }

      function build_node_textline(node_name, node, ndir) {
        var listing = "/*%node_textline%" + node_name + "%*/";

        var text = "";
        for (var i = 0; i < ndir.result.length; i++)
          text += ndir.result[i];

        for (var i = 0; i < node.length; i++)
          if (node[i].type == "node_in" || node[i].type == "node_out" 
              || node[i].type == "node_param") {
            var name = "node_" + node_name + "_var_" + node[i].identifier.name;
            var expr_str = "([^0-9a-zA-Z_]|^)(" + node[i].identifier.name + ")(?![0-9a-zA-Z_])";
            var expr = new RegExp(expr_str, "gm");
            text = text.replace(expr, "$1" + name);
          }

        listing += text;
        listing += "/*%node_textline_end%" + ndir.offset + "%*/\n";
        return listing;
      }

      function build_node_in_out_param(node_name, ndir) {
        var listing = "/*%" + ndir.type + "%*/";

        if (ndir.decl_type.type_qualifier) {
          var value = ndir.decl_type.type_qualifier.value;
          if(value.constructor == Array)
            for (var i = 0; i < value.length; i++)
              listing += value[i].name + " ";
          else
            listing += value.name + " ";
        }

        if (ndir.decl_type.precision_qualifier)
          listing += ndir.decl_type.precision_qualifier.value.name + " ";
        listing += ndir.decl_type.type_specifier.name.name + " ";
        listing += "node_" + node_name + "_var_" + ndir.identifier.name + ";";
        listing += "/*%" + ndir.type + "_end%" + ndir.is_optional + "%";
        listing += node_name + "%" + ndir.offset + "%*/\n";

        return listing;
      }

      function build_lamp_directive(unit, lamps_collector) {
        var listing = "";

        switch (unit.type) {
          case "lamp":
            listing += "/*%" + unit.type + "%" + unit.name + "%*/\n";
            lamps_collector.current_lamp = unit.name;
            lamps_collector.lamps_structure[lamps_collector.current_lamp] = [];
            break;
          case "endlamp":
            listing += "/*%" + unit.type + "%*/\n";
            lamps_collector.current_lamp = null;
            break;

          case "lamps_main":
            listing += "/*%lamps_main%*/\n";
            listing += build_lamps_main(lamps_collector.lamps_structure);
            listing += "/*%lamps_main_end%*/\n";
            break;
        }

        return listing;
      }

      function build_lamps_main(lamps_structure) {
        var listing = "";
        for (var lamp_name in lamps_structure) {
          var lamp_node = lamps_structure[lamp_name];
          listing += "{";
          for (var j = 0; j < lamp_node.length; j++)
            listing += build_lamp_textline(lamp_name, lamp_node[j]);
          listing += "}";
        }
        return listing;
      }

      function build_lamp_textline(lamp_name, ldir) {
        var listing = "/*%lamp_textline%" + lamp_name + "%*/";

        for (var i = 0; i < ldir.result.length; i++)
          listing += ldir.result[i];

        listing += "/*%lamp_textline_end%" + ldir.offset + "%*/\n";
        return listing;
      }

      var _is_node_param = false;

      // GLSL parsing: read directives
      var _pp_node_with_node_condition = [];
      var _pp_vardef_identifiers = [];
      var _pp_import_export = {};
      // {uid: node}
      var _uid_to_node = {};

      var _pp_insertions = {};

      var CURR_INCLUDE = [null];

      function check_directive_comment(symbols) {
        // check directive comment insertion
        var str = "";
        for (var i = 0; i < symbols.length; i++)
          str += symbols[i][1];
        str = str.trim();
        if (str.charAt(0) == "%") {
          check_directive(str) || check_replace(str) || check_node_insertion(str)
          || check_node_borders(str) || check_node_parameters(str) || check_node_condition(str)
          || check_include(str) || check_import_export(str) || check_lamp_insertion(str) 
          || check_lamp_borders(str) || check_lamp_textlines(str);
        }
      }

      function check_directive(str) {
        var expr = /^%directive%(.*?)%directive_end%/i;
        var res = expr.exec(str);
        if (res) {
          _pp_insertions[offset()] = "\n/*" + str + "*/\n";
          return check_directive_vardef(res[1]);
        }
        return false;
      }

      function check_directive_vardef(str) {
        var expr = /^ *?# *?(define|var) *?([0-9a-z_]+)/i;
        var res = expr.exec(str);
        if (res) {
          _pp_vardef_identifiers.push(res[2]);
          return true;
        }
        return false;
      }

      function check_replace(str) {
        var expr = /^%replace((_end)|(%from%.*?%to%.*?))%$/i;
        var res = expr.exec(str);
        if (res) {
          _pp_insertions[offset()] = " /*" + str + "*/ ";
          return true;
        }
        return false;
      }

      function check_node_insertion(str) {
        var expr = /^%(nodes_global|nodes_main)(_end)?%$/i;
        var res = expr.exec(str);
        if (res) {
          _pp_insertions[offset()] = "\n/*" + str + "*/\n";
          return true;
        }
        return false;
      }

      function check_node_borders(str) {
        var expr = /^%((node%.*?)|endnode)%$/i;
        var res = expr.exec(str);
        if (res) {
          _pp_insertions[offset()] = "\n/*" + str + "*/\n";
          return true;
        }
        return false; 
      }

      function check_node_parameters(str) {
        var expr = /^%(node_in|node_out|node_param|node_textline)(_end)?.*?%$/i;
        var res = expr.exec(str);

        if (res) {
          _pp_insertions[offset()] = "\n/*" + str + "*/\n";

          if (res[1] !== "node_textline")
            if (res[2])
              _is_node_param = false;
            else
              _is_node_param = true;

          return true;
        }
        return false; 
      }

      function check_node_condition(str) {
        var expr = /^%node_condition.*?%$/i;
        var res = expr.exec(str);

        if (res) {
          _pp_insertions[offset()] = "\n/*" + str + "*/\n";
          return true;
        }
        return false; 
      }

      function check_lamp_insertion(str) {
        var expr = /^%lamps_main(_end)?%$/i;
        var res = expr.exec(str);
        if (res) {
          _pp_insertions[offset()] = "\n/*" + str + "*/\n";
          return true;
        }
        return false;
      }

      function check_lamp_borders(str) {
        var expr = /^%((lamp%.*?)|endlamp)%$/i;
        var res = expr.exec(str);
        if (res) {
          _pp_insertions[offset()] = "\n/*" + str + "*/\n";
          return true;
        }
        return false; 
      }

      function check_lamp_textlines(str) {
        var expr = /^%(lamp_textline|lamp_textline_end).*?%$/i;
        var res = expr.exec(str);
        if (res) {
          _pp_insertions[offset()] = "\n/*" + str + "*/\n";
          return true;
        }
        return false; 
      }

      function check_include(str) {
        var expr = /^%(include|include_end)%(.*?)%$/;
        var res = expr.exec(str);
        if (res) {
          var type = res[1];
          var name = res[2];

          switch (type) {
          case "include":
            CURR_INCLUDE.push(name);
            if (!(name in _pp_import_export))
              _pp_import_export[name] = {
                "import": {},
                "export": {}
              }
            break;
          case "include_end":
            CURR_INCLUDE.pop();
            break;
          }

          _pp_insertions[offset()] = "\n/*" + str + "*/\n";
          return true;
        }
        return false;
      }

      function check_import_export(str) {
        var expr = /^%(import|export)%(.*?)%$/;
        var res = expr.exec(str);
        if (res) {
          var incl_name = CURR_INCLUDE[CURR_INCLUDE.length - 1];
          if (!(incl_name in _pp_import_export)) {
            _pp_import_export[incl_name] = {
              "import": {},
              "export": {}
            }
          }

          if (res[2] != "") {
            var type = res[1];
            var tokens = res[2].split(",");
            for (var i = 0; i < tokens.length; i++)
              _pp_import_export[incl_name][type][tokens[i]] = 0;
          }
          return true;
        } 
        return false;
      }

      


      // GLSL parsing: generate special nodes
      if (options.init_node_uid)
        var _node_uid = options.init_node_uid;
      else
        var _node_uid = 0;

      function flat_array(data) {
        var flat = [];

        for (var prop in data)
          if (data[prop])
            if (data[prop].constructor == Array)
              flat.push.apply(flat, flat_array(data[prop]));
            else if (data[prop].constructor == Object)
              flat.push(data[prop]);
        return flat;
      }

      function get_children_with_uid(parent) {
        var result = [];
        var children = flat_array(parent);
        while (children.length > 0) {
          var child = children.pop();

          if ("uid" in child)
            result.push(child);
          else
            children.push.apply(children, flat_array(child));
        }
        return result;
      }

      function common_node(data) {
        data.offset = offset();
        data.uid = _node_uid++;
        data.before_comments = [];

        return data;
      }

      function punctuation_node(type, data) {
        return common_node({
          node: "punctuation_node",
          type: type,
          data: data
        });
      }

      function keyword_node(name) {
        return common_node({
          node: "keyword_node",
          name: name
        });
      }

      function operation_node(type, data) {
        return common_node({
          node: "operation_node",
          type: type,
          data: data
        });
      }

      function binary_chain_node(node_name, first, others) {
        var chain_node = common_node({
          node: node_name,
          left: first
        });

        for (var i = 0; i < others.length; i++) {
          chain_node.operator = others[i][0];
          chain_node.right = others[i][1];

          if (i != others.length - 1)
            chain_node = common_node({
              node: node_name,
              left: chain_node
            });

        }
        return common_node(chain_node);
      }

      function unary_chain_node(node_name, expression, operations) {
        var chain_node = common_node({
          node: node_name,
          expression: expression
        });

        for (var i = 0; i < operations.length; i++) {
          chain_node.operator = operations[i];

          if (i != operations.length - 1)
            chain_node = common_node({
              node: node_name,
              expression: chain_node
            });
        }
        return common_node(chain_node);
      }

      function parenting_unit(ast) {
        var nodes = [ast];
        // {offset: [nodes]}
        var offset_to_nodes = {};
        while (nodes.length > 0) {
          var node = nodes.pop();
          var children = get_children_with_uid(node);

          _uid_to_node[node.uid] = node;
          
          for (var l in children)
            children[l].parent_uid = node.uid;

          nodes.push.apply(nodes, children);

          if (!offset_to_nodes[node.offset])
            offset_to_nodes[node.offset] = [];
          offset_to_nodes[node.offset].push(node.uid);
        }

        for (var i in offset_to_nodes) {
          for (var j in offset_to_nodes[i]) {
            var node_uid = offset_to_nodes[i][j];
            if (node_uid in _uid_to_node) {
              var node = _uid_to_node[node_uid];
              // HACK: don't add before_comments to statement_list
              if (node.node != "statement_list") {
                for (var k in _pp_insertions) {
                  if (k < node.offset) {
                    node.before_comments.push(_pp_insertions[k]);

                    var expr = /\/\*%node_condition.*?%\*\//i;
                    var res = expr.exec(_pp_insertions[k]);
                    if (res && 
                        (_pp_node_with_node_condition.indexOf(node_uid) == -1))
                      _pp_node_with_node_condition.push(node_uid);
                    delete _pp_insertions[k];
                  } else
                    break;
                }
              }
            }
          }
        }
        return ast;
      }
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
