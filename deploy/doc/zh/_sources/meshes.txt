
网格
****


目录
^^^^

* 网格

  * Static and Dynamic Meshes

  * 设置

    * 覆盖包围体积

  * 变形

Meshes are a subclass of objects. Meshes are different from objects of
the other types in a sence that they have geometric structure that is
visible in the scene. All objects user can see in a scene are either
meshes or convertet to meshes on export (like the "CURVE", "TEXT",
"METABALL" and "SURFACE" type objects).

Blend4Web addon has several tools for mesh editing, including the
normal editor.

This chapter provides an overview of the "MESH" type object parameters
and settings, as well as the API functions to work with them.


Static and Dynamic Meshes
=========================

All "MESH" objects can be divided into static and dynamic.

**Static meshes** are meshes that can be merged together if they have
the same material.

**Dynamic meshes** are meshes that cannot be combined with each other.

Merging of static meshes - so called batching - is performed
automatically when the scene is loaded in order to optimize the number
of draw calls. The conversion is performed even if there is just one
object in the scene. The center of the resulting mesh is located in
the origin.

Meshes that have animation, physics or a parent, which is a dynamic
object, are considered dynamic.


设置
====

网格含有 物体 所有的设置和一些额外的设置。


覆盖包围体积
------------

这部分是用来覆盖包围盒。这样体积盒用于检查物体的可见性，来处理碰撞和物
理交互。通过编辑它们，可以实现各种效果。

[图片]

该 "覆盖包围体积" 部分可以在 "Blend4Web" 面板上找到（在 法线编辑器 旁
边）。

*显示包围*

   [图片]

   显示在Blender视口中的包围盒。只有当 "覆盖网格包围" 参数开启，启用该
   选项。包围盒可以呈现为长方体或为圆形或椭圆的组合。多个渲染方式可以
   在同一时间是启用（甚至所有三种方法可以同时启用）。

注解: 所选渲染方法不会影响包围盒的形状，只是影响它在视口中展示的方式
  。



*覆盖网格包围*

   [图片]

   此按钮可以使基本网格包围覆盖。包围盒总是一个长方体并以物体的枢轴点
   为中心。

*MinX and  MaxX*
   包围盒的X尺寸。默认情况下， *MinX* = -1, *MaxX* = 1

*MinY and  MaxY*
   包围盒的Y尺寸。缺省情况下，*MinY* = -1, *MaxY* = 1.

*MinZ and  MaxZ*
   包围盒的z方向。缺省情况下，*MinZ* = -1, *MaxZ* = 1


变形
====

变形目标可以用Blender的标准 "网格 > 形变键" 界面进行添加。

[图片]



该引擎支持所有 “相对” 类型下的形变键选项。

要设置一个形变键值，使用 "geometry.js" 模块的 "apply_shape_key" 方法。

注解: 该物体必须具有 "导出形变键" 参数启用。

   // ...
   var obj = m_scenes.get_object_by_name("Object");
   m_geometry.apply_shape_key(obj, "Key 1", 0.5);
   // ...
